From f432b979366199e721afc17951c9aaae57e8c69b Mon Sep 17 00:00:00 2001
From: Jae Hyun Yoo <jae.hyun.yoo@linux.intel.com>
Date: Tue, 20 Oct 2020 15:49:26 -0700
Subject: [PATCH] fix SUS_WARN handling logic

This commit fixes SUS_WARN handling as dual-edge detection mode
to support deepsx entry event properly.

Signed-off-by: Jae Hyun Yoo <jae.hyun.yoo@linux.intel.com>

Upstream-Status: Pending
---
 arch/arm/mach-aspeed/ast2600/ast-espi.c | 51 +++++++++++++------------
 1 file changed, 27 insertions(+), 24 deletions(-)

diff --git a/arch/arm/mach-aspeed/ast2600/ast-espi.c b/arch/arm/mach-aspeed/ast2600/ast-espi.c
index 1d7ae52961..71604c4a7f 100644
--- a/arch/arm/mach-aspeed/ast2600/ast-espi.c
+++ b/arch/arm/mach-aspeed/ast2600/ast-espi.c
@@ -146,9 +146,9 @@ static void espi_irq_handler(void *cookie)
 {
 	uint32_t irq_status = readl(AST_ESPI_BASE + ESPI008);
 
-	DBG_ESPI("espi_irq_handler, ESPI008=0X%x, ESPI00c=0X%x,\
-		ESPI100=0X%x, ESPI11c=0X%x, ESPI094=0X%x,\
-		ESPI12c=0X%x, irq_status=0x%x\n",
+	DBG_ESPI("espi_irq_handler, ESPI008=0X%x, ESPI00c=0X%x, "
+		 "ESPI100=0X%x, ESPI11c=0X%x, ESPI094=0X%x, "
+		 "ESPI12c=0X%x, irq_status=0x%x\n",
 		readl(AST_ESPI_BASE + ESPI008),
 		readl(AST_ESPI_BASE + ESPI00C),
 		readl(AST_ESPI_BASE + ESPI100),
@@ -163,21 +163,23 @@ static void espi_irq_handler(void *cookie)
 		DBG_ESPI("sys_status : 0x%08X\n", sys_status);
 		if (sys_status & AST_ESPI_HOST_RST_WARN) {
 			DBG_ESPI("HOST_RST_WARN evt: 0x%08X\n", sys_event);
-			if (sys_event & AST_ESPI_HOST_RST_WARN) {
-				uint32_t v = readl(AST_ESPI_BASE + ESPI098) |
-					     AST_ESPI_HOST_RST_ACK;
-				writel(v, AST_ESPI_BASE + ESPI098);
-				DBG_ESPI("HOST_RST_WARN sent ack\n");
-			}
+			uint32_t v = readl(AST_ESPI_BASE + ESPI098);
+			if (sys_event & AST_ESPI_HOST_RST_WARN)
+				v |= AST_ESPI_HOST_RST_ACK;
+			else
+				v &= ~AST_ESPI_HOST_RST_ACK;
+			writel(v, AST_ESPI_BASE + ESPI098);
+			DBG_ESPI("HOST_RST_WARN sent ack\n");
 		}
 		if (sys_status & AST_ESPI_OOB_RST_WARN) {
 			DBG_ESPI("OOB_RST_WARN evt: 0x%08X\n", sys_event);
-			if (sys_event & AST_ESPI_OOB_RST_WARN) {
-				uint32_t v = readl(AST_ESPI_BASE + ESPI098) |
-					     AST_ESPI_OOB_RST_ACK;
-				writel(v, AST_ESPI_BASE + ESPI098);
-				DBG_ESPI("OOB_RST_WARN sent ack\n");
-			}
+			uint32_t v = readl(AST_ESPI_BASE + ESPI098);
+			if (sys_event & AST_ESPI_OOB_RST_WARN)
+				v |= AST_ESPI_OOB_RST_ACK;
+			else
+				v &= ~AST_ESPI_OOB_RST_ACK;
+			writel(v, AST_ESPI_BASE + ESPI098);
+			DBG_ESPI("OOB_RST_WARN sent ack\n");
 		}
 		if (sys_status & AST_ESPI_PLTRSTN) {
 			DBG_ESPI("PLTRSTN: %c, evt: 0x%08X\n",
@@ -194,12 +196,13 @@ static void espi_irq_handler(void *cookie)
 		DBG_ESPI("sys1_status : 0x%08X\n", sys1_status);
 		if (sys1_status & AST_ESPI_SUS_WARN) {
 			DBG_ESPI("SUS WARN evt: 0x%08X\n", sys1_event);
-			if (sys1_event & AST_ESPI_SUS_WARN) {
-				uint32_t v = readl(AST_ESPI_BASE + ESPI104) |
-					     AST_ESPI_SUS_ACK;
-				writel(v, AST_ESPI_BASE + ESPI104);
-				DBG_ESPI("SUS_WARN sent ack\n");
-			}
+			uint32_t v = readl(AST_ESPI_BASE + ESPI104);
+			if (sys1_event & AST_ESPI_SUS_WARN)
+				v |= AST_ESPI_SUS_ACK;
+			else
+				v &= ~AST_ESPI_SUS_ACK;
+			writel(v, AST_ESPI_BASE + ESPI104);
+			DBG_ESPI("SUS_WARN sent ack\n");
 		}
 		writel(sys1_status, AST_ESPI_BASE + ESPI12C); /* clear status */
 	}
@@ -217,9 +220,9 @@ static void espi_irq_handler(void *cookie)
 
 	writel(irq_status, AST_ESPI_BASE + ESPI008); /* clear irq_status */
 
-	DBG_ESPI("end espi_irq_handler, ESPI008=0X%x, ESPI00c=0X%x,\
-		ESPI100=0X%x, ESPI11c=0X%x, ESPI094=0X%x,\
-		ESPI12c=0X%x, irq_status=0X%x\n",
+	DBG_ESPI("end espi_irq_handler, ESPI008=0X%x, ESPI00c=0X%x, "
+		 "ESPI100=0X%x, ESPI11c=0X%x, ESPI094=0X%x, "
+		 "ESPI12c=0X%x, irq_status=0X%x\n",
 		readl(AST_ESPI_BASE + ESPI008),
 		readl(AST_ESPI_BASE + ESPI00C),
 		readl(AST_ESPI_BASE + ESPI100),
-- 
2.25.1

