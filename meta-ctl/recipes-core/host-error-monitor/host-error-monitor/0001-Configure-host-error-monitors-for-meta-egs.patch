From 211d0f904c5daab7f4fba5af418a354a3511ccb4 Mon Sep 17 00:00:00 2001
From: "Jason M. Bills" <jason.m.bills@intel.com>
Date: Tue, 15 Dec 2020 10:05:31 -0800
Subject: [PATCH] Configure host error monitors for meta-egs

The new host error monitor architecture allows the list of error
monitors to be customized through a platform-specific patch file.

This patch configures the host error monitors for meta-egs.

Change-Id: I7070a3409b1471d7f9c93eca3e36b477f484e5d7
Signed-off-by: Jason M. Bills <jason.m.bills@intel.com>
Upstream-Status: Pending
---
 include/error_monitors.hpp | 138 ++++++++++++++++++++++++++++++++++---
 1 file changed, 130 insertions(+), 8 deletions(-)

diff --git a/include/error_monitors.hpp b/include/error_monitors.hpp
index 80332b0..4ecac87 100644
--- a/include/error_monitors.hpp
+++ b/include/error_monitors.hpp
@@ -14,23 +14,89 @@
 // limitations under the License.
 */
 #pragma once
+#include <error_monitors/cpld_crc_monitor.hpp>
+#include <error_monitors/cpu_mismatch_monitor.hpp>
+#include <error_monitors/cpu_thermtrip_monitor.hpp>
+#include <error_monitors/err2_monitor.hpp>
+#include <error_monitors/err_pin_monitor.hpp>
+#include <error_monitors/ierr_monitor.hpp>
+#include <error_monitors/mem_thermtrip_monitor.hpp>
+#include <error_monitors/pch_thermtrip_monitor.hpp>
+#include <error_monitors/smi_monitor.hpp>
+#include <error_monitors/vr_hot_monitor.hpp>
 #include <sdbusplus/asio/object_server.hpp>
-// #include <error_monitors/smi_monitor.hpp>
 
 #include <memory>
 
 namespace host_error_monitor::error_monitors
 {
 // Error signals to monitor
-// static std::unique_ptr<host_error_monitor::smi_monitor::SMIMonitor>
-// smiMonitor;
+static std::unique_ptr<host_error_monitor::smi_monitor::SMIMonitor> smiMonitor;
+static std::unique_ptr<
+    host_error_monitor::cpu_mismatch_monitor::CPUMismatchMonitor>
+    cpu1MismatchMonitor;
+static std::unique_ptr<
+    host_error_monitor::cpu_mismatch_monitor::CPUMismatchMonitor>
+    cpu2MismatchMonitor;
+static std::unique_ptr<host_error_monitor::err_pin_monitor::ErrPinMonitor>
+    err0Monitor;
+static std::unique_ptr<host_error_monitor::err_pin_monitor::ErrPinMonitor>
+    err1Monitor;
+static std::unique_ptr<host_error_monitor::err2_monitor::Err2Monitor>
+    err2Monitor;
+static std::unique_ptr<host_error_monitor::ierr_monitor::IERRMonitor>
+    ierrMonitor;
+static std::unique_ptr<
+    host_error_monitor::cpu_thermtrip_monitor::CPUThermtripMonitor>
+    cpu1ThermtripMonitor;
+static std::unique_ptr<
+    host_error_monitor::cpu_thermtrip_monitor::CPUThermtripMonitor>
+    cpu2ThermtripMonitor;
+static std::unique_ptr<
+    host_error_monitor::mem_thermtrip_monitor::MemThermtripMonitor>
+    mem1ThermtripMonitor;
+static std::unique_ptr<
+    host_error_monitor::mem_thermtrip_monitor::MemThermtripMonitor>
+    mem2ThermtripMonitor;
+static std::unique_ptr<host_error_monitor::vr_hot_monitor::VRHotMonitor>
+    cpu1VRHotMonitor;
+static std::unique_ptr<host_error_monitor::vr_hot_monitor::VRHotMonitor>
+    cpu1MemVRHotMonitor;
+static std::unique_ptr<host_error_monitor::vr_hot_monitor::VRHotMonitor>
+    cpu2VRHotMonitor;
+static std::unique_ptr<host_error_monitor::vr_hot_monitor::VRHotMonitor>
+    cpu2MemVRHotMonitor;
+static std::unique_ptr<
+    host_error_monitor::pch_thermtrip_monitor::PCHThermtripMonitor>
+    pchThermtripMonitor;
+static std::unique_ptr<host_error_monitor::cpld_crc_monitor::CPLDCRCMonitor>
+    cpu1CPLDCRCMonitor;
+static std::unique_ptr<host_error_monitor::cpld_crc_monitor::CPLDCRCMonitor>
+    cpu2CPLDCRCMonitor;
 
 // Check if all the signal monitors started successfully
 bool checkMonitors()
 {
     bool ret = true;
 
-    // ret &= smiMonitor->isValid();
+    ret &= smiMonitor->isValid();
+    ret &= cpu1MismatchMonitor->isValid();
+    ret &= cpu2MismatchMonitor->isValid();
+    ret &= err0Monitor->isValid();
+    ret &= err1Monitor->isValid();
+    ret &= err2Monitor->isValid();
+    ret &= ierrMonitor->isValid();
+    ret &= cpu1ThermtripMonitor->isValid();
+    ret &= cpu2ThermtripMonitor->isValid();
+    ret &= mem1ThermtripMonitor->isValid();
+    ret &= mem2ThermtripMonitor->isValid();
+    ret &= cpu1VRHotMonitor->isValid();
+    ret &= cpu1MemVRHotMonitor->isValid();
+    ret &= cpu2VRHotMonitor->isValid();
+    ret &= cpu2MemVRHotMonitor->isValid();
+    ret &= pchThermtripMonitor->isValid();
+    ret &= cpu1CPLDCRCMonitor->isValid();
+    ret &= cpu2CPLDCRCMonitor->isValid();
 
     return ret;
 }
@@ -39,9 +105,59 @@ bool checkMonitors()
 bool startMonitors(boost::asio::io_context& io,
                    std::shared_ptr<sdbusplus::asio::connection> conn)
 {
-    // smiMonitor =
-    // std::make_unique<host_error_monitor::smi_monitor::SMIMonitor>(
-    //     io, conn, "SMI");
+    smiMonitor = std::make_unique<host_error_monitor::smi_monitor::SMIMonitor>(
+        io, conn, "SMI");
+    cpu1MismatchMonitor = std::make_unique<
+        host_error_monitor::cpu_mismatch_monitor::CPUMismatchMonitor>(
+        io, conn, "CPU1_MISMATCH", 1);
+    cpu2MismatchMonitor = std::make_unique<
+        host_error_monitor::cpu_mismatch_monitor::CPUMismatchMonitor>(
+        io, conn, "CPU2_MISMATCH", 2);
+    err0Monitor =
+        std::make_unique<host_error_monitor::err_pin_monitor::ErrPinMonitor>(
+            io, conn, "CPU_ERR0", 0);
+    err1Monitor =
+        std::make_unique<host_error_monitor::err_pin_monitor::ErrPinMonitor>(
+            io, conn, "CPU_ERR1", 1);
+    err2Monitor =
+        std::make_unique<host_error_monitor::err2_monitor::Err2Monitor>(
+            io, conn, "CPU_ERR2");
+    ierrMonitor =
+        std::make_unique<host_error_monitor::ierr_monitor::IERRMonitor>(
+            io, conn, "CPU_CATERR");
+    cpu1ThermtripMonitor = std::make_unique<
+        host_error_monitor::cpu_thermtrip_monitor::CPUThermtripMonitor>(
+        io, conn, "CPU1_THERMTRIP", 1);
+    cpu2ThermtripMonitor = std::make_unique<
+        host_error_monitor::cpu_thermtrip_monitor::CPUThermtripMonitor>(
+        io, conn, "CPU2_THERMTRIP", 2);
+    mem1ThermtripMonitor = std::make_unique<
+        host_error_monitor::mem_thermtrip_monitor::MemThermtripMonitor>(
+        io, conn, "H_CPU0_MEMTRIP_LVC1_N", 1);
+    mem2ThermtripMonitor = std::make_unique<
+        host_error_monitor::mem_thermtrip_monitor::MemThermtripMonitor>(
+        io, conn, "H_CPU1_MEMTRIP_LVC1_N", 2);
+    cpu1VRHotMonitor =
+        std::make_unique<host_error_monitor::vr_hot_monitor::VRHotMonitor>(
+            io, conn, "CPU1_VRHOT", "CPU 1");
+    cpu1MemVRHotMonitor =
+        std::make_unique<host_error_monitor::vr_hot_monitor::VRHotMonitor>(
+            io, conn, "CPU1_MEM_VRHOT", "CPU 1 Memory");
+    cpu2VRHotMonitor =
+        std::make_unique<host_error_monitor::vr_hot_monitor::VRHotMonitor>(
+            io, conn, "CPU2_VRHOT", "CPU 2");
+    cpu2MemVRHotMonitor =
+        std::make_unique<host_error_monitor::vr_hot_monitor::VRHotMonitor>(
+            io, conn, "CPU2_MEM_VRHOT", "CPU 2 Memory");
+    pchThermtripMonitor = std::make_unique<
+        host_error_monitor::pch_thermtrip_monitor::PCHThermtripMonitor>(
+        io, conn, "PCH_BMC_THERMTRIP");
+    cpu1CPLDCRCMonitor =
+        std::make_unique<host_error_monitor::cpld_crc_monitor::CPLDCRCMonitor>(
+            io, conn, "CPU1_CPLD_CRC_ERROR", 1, "CPU1_PRESENCE");
+    cpu2CPLDCRCMonitor =
+        std::make_unique<host_error_monitor::cpld_crc_monitor::CPLDCRCMonitor>(
+            io, conn, "CPU2_CPLD_CRC_ERROR", 2, "CPU2_PRESENCE");
 
     return checkMonitors();
 }
@@ -49,7 +165,13 @@ bool startMonitors(boost::asio::io_context& io,
 // Notify the signal monitors of host on event
 void sendHostOn()
 {
-    // smiMonitor->hostOn();
+    smiMonitor->hostOn();
+    cpu1MismatchMonitor->hostOn();
+    cpu2MismatchMonitor->hostOn();
+    err0Monitor->hostOn();
+    err1Monitor->hostOn();
+    err2Monitor->hostOn();
+    ierrMonitor->hostOn();
 }
 
 } // namespace host_error_monitor::error_monitors
-- 
2.25.1

