From 718c8b2a8ac68440a544fca1fcd438cf680db11b Mon Sep 17 00:00:00 2001
From: balajhidn <balajhix.neelakantan.durvas@intel.com>
Date: Tue, 21 Jun 2022 17:44:56 +0000
Subject: [PATCH] Enable firmware update support when FFUJ is set

Description of changes made in this patch:
1. Added "intel_ffuj_enabled" API that allows easy reading
    of the FFUJ from other functions, such as abortboot.
    This API inturn call read_ffuj and gets the status of FFUJ.
2. When FFUJ is set, "start fw update loop" is triggered for
    accepting KCS data and serial console is disabled for key inputs.
3. Post FFUJ check, intel_failed_boot is called instead of gpio_abort
    to avoid repeated call to read_ffuj.
4. Moved intel_ffuj_enabled() call after "bootdelay" check.
    so, the user can enter into uboot command line interface on hitting any key.

Tested:
1. Uboot shell login disabled even on hitting any key (No boot delay)
2. When FFUJ is set, boot stops at u-boot
    Serial console inputs are disabled and
    accepts the FW update KCS commands
3. When FFUJ is unset and boot failure detected,
    then boot stops at u-boot and serial console input is enabled
4. When FFUJ is unset and no boot failure, then it allows normal kernel boot

Signed-off-by: balajhidn <balajhix.neelakantan.durvas@intel.com>
Upstream-Status: Pending
---
 .../include/asm/arch-aspeed/ast-2600-intel.h  | 20 +++++++++++++++++++
 arch/arm/include/asm/arch-aspeed/platform.h   |  1 +
 board/aspeed/ast2600_intel/fw-update.c        | 11 +++++-----
 board/aspeed/ast2600_intel/intel.c            |  8 ++++++++
 common/autoboot.c                             | 18 ++++++++---------
 5 files changed, 42 insertions(+), 16 deletions(-)
 create mode 100644 arch/arm/include/asm/arch-aspeed/ast-2600-intel.h

diff --git a/arch/arm/include/asm/arch-aspeed/ast-2600-intel.h b/arch/arm/include/asm/arch-aspeed/ast-2600-intel.h
new file mode 100644
index 0000000000..d8980397c6
--- /dev/null
+++ b/arch/arm/include/asm/arch-aspeed/ast-2600-intel.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright 2022 Intel Corporation
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+
+#ifndef __AST_INTEL_2600_H__
+#define __AST_INTEL_2600_H__
+
+#define AST_2600_INTEL 1
+
+#ifndef __ASSEMBLY__
+int intel_ffuj_enabled(void);
+void start_fw_update_loop(void);
+#endif
+
+#endif /* __AST_INTEL_2600_H__ */
diff --git a/arch/arm/include/asm/arch-aspeed/platform.h b/arch/arm/include/asm/arch-aspeed/platform.h
index f016bdaba3..fe03468e1e 100644
--- a/arch/arm/include/asm/arch-aspeed/platform.h
+++ b/arch/arm/include/asm/arch-aspeed/platform.h
@@ -55,6 +55,7 @@
 #define ASPEED_SRAM_BASE	0x10000000
 #define ASPEED_SRAM_SIZE	0x16000
 #define ASPEED_FMC_CS0_BASE	0x20000000
+#include <asm/arch/ast-2600-intel.h>
 #else
 #err "No define for platform.h"
 #endif
diff --git a/board/aspeed/ast2600_intel/fw-update.c b/board/aspeed/ast2600_intel/fw-update.c
index 70f3912ba6..3784bc6d68 100644
--- a/board/aspeed/ast2600_intel/fw-update.c
+++ b/board/aspeed/ast2600_intel/fw-update.c
@@ -1028,24 +1028,23 @@ void start_fw_update_loop(void)
 			rc = flash_image();
 			if (rc == SUCCESS) {
 				update_processing_status(UPDATE_SUCCESSFUL, 100);
+				printf("Flash completed\n");
 			} else {
 				update_processing_status(UPDATE_ERROR, 100);
 			}
 
-			/* Adding delay to make sure consumer gets status */
-			mdelay(WAIT_STATE_TIMEOUT);
-
-			reset_all_settings();
-
 			if (g_fwupd_settings.options_value & DEFER_BMC_RST_BIT)
 			{
 				update_processing_status(AC_CYCLE_REQUIRED, 100);
+
+				/* Adding delay to make sure consumer gets status */
+				mdelay(WAIT_STATE_TIMEOUT);
+				reset_all_settings();
 			}
 			else
 			{
 				do_reset(NULL, 0, 0, NULL);
 			}
-			break;
 		}
 		mdelay(WAIT_STATE_TIMEOUT);
 	}
diff --git a/board/aspeed/ast2600_intel/intel.c b/board/aspeed/ast2600_intel/intel.c
index c862f8d745..7ebedc78a2 100644
--- a/board/aspeed/ast2600_intel/intel.c
+++ b/board/aspeed/ast2600_intel/intel.c
@@ -108,6 +108,14 @@ int read_ffuj(void)
 	return 0;
 }
 
+int intel_ffuj_enabled(void)
+{
+	int ffuj = 0;
+	ffuj = read_ffuj();
+	printf("FFUJ: %d\n", ffuj);
+	return ffuj <= 0 ? 0 : 1;
+}
+
 /* gpio_abort is a weak symbol in common/autoboot.c */
 int gpio_abort(void)
 {
diff --git a/common/autoboot.c b/common/autoboot.c
index 339cc8c870..beff3bd307 100644
--- a/common/autoboot.c
+++ b/common/autoboot.c
@@ -275,17 +275,15 @@ static int abortboot(int bootdelay)
 	if (bootdelay >= 0)
 		abort = __abortboot(bootdelay);
 
-	if (!abort)
+	/*
+	 * Check ffuj to abort the autoboot and start fw update loop.
+	 * This also disables serial console input.
+	 */
+	if (!abort && intel_ffuj_enabled())
 	{
-		abort = gpio_abort();
-		if (abort)
-		{
-			printf("#### BMC is in disabled state(FFU Jumper is asserted), "
-					"So BMC serial console disabled. ####\n");
-			while (1) {
-				mdelay(WAIT_STATE_TIMEOUT);
-			}
-		}
+		printf ("FFUJ jumper is asserted so booting stops at u-boot and "
+				"accept only FW update commands via KCS\n");
+		start_fw_update_loop();
 	}
 
 	if (intel_failed_boot())
-- 
2.25.1

