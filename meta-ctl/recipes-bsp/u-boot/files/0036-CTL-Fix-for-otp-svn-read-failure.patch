From 094f4ebd84d605aafd74febf91ef5c114c47fa9b Mon Sep 17 00:00:00 2001
From: Anoop S <anoopx.s@intel.com>
Date: Wed, 19 Jul 2023 07:31:08 +0000
Subject: [PATCH] CTL:Fix for otp_svn read failure

updating the wait_complete API to address the
timing issue while reading otp svn.
Also moved otp_lock() function end of uboot load.

Test Results :
1.After firmware update System up and running.
2.After dediprog flash System up and running.
3.After AC power cycle BMC up and stable.

Signed-off-by: Anoop S <anoopx.s@intel.com>
---
 common/autoboot.c     |  2 ++
 common/spl/otp_read.h | 12 +++++++-----
 common/spl/spl_fit.c  |  3 +--
 env/env.c             |  2 --
 include/otp.h         |  6 +++---
 5 files changed, 13 insertions(+), 12 deletions(-)

diff --git a/common/autoboot.c b/common/autoboot.c
index 4d75cfa1e4..c02bfade25 100644
--- a/common/autoboot.c
+++ b/common/autoboot.c
@@ -15,6 +15,7 @@
 #include <u-boot/sha256.h>
 #include <bootcount.h>
 #include <secureboot_bbsram.h>
+#include <otp.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -392,6 +393,7 @@ const char *bootdelay_process(void)
 
 	process_fdt_options(gd->fdt_blob);
 	stored_bootdelay = bootdelay;
+	writel(OTP_LOCK_VALUE, OTP_PROTECT_KEY); //protect otp controller
 
 	return s;
 }
diff --git a/common/spl/otp_read.h b/common/spl/otp_read.h
index b0af2fc3ee..d2f4895c99 100644
--- a/common/spl/otp_read.h
+++ b/common/spl/otp_read.h
@@ -4,6 +4,7 @@
  */
 
 #include <asm/io.h>
+#include <linux/iopoll.h>
 
 #define PFM_IMAGE_LOAD_ADDR     0x80000
 #define PFM_HEADER_OFFSET       0x400
@@ -173,12 +174,13 @@ static void otp_initialize()
         writel(OTP_PASSWD, OTP_PROTECT_KEY);//password
 }
 
-static void wait_complete(void)
+static int wait_complete(void)
 {
-        int reg;
-        do {
-                reg = readl(OTP_STATUS);
-        } while ((reg & 0x6) != 0x6);
+        u32 val;
+        int ret;
+        udelay(1);
+        ret = readl_poll_timeout(OTP_STATUS, val, (val & 0x6) == 0x6, 100000);
+        return ret;
 }
 
 void otp_read_conf(u32 offset, u32 *data)
diff --git a/common/spl/spl_fit.c b/common/spl/spl_fit.c
index b087fae742..de1bf580c2 100644
--- a/common/spl/spl_fit.c
+++ b/common/spl/spl_fit.c
@@ -168,7 +168,7 @@ bool validate_svn(void)
         uint32_t fw_svn = pfm_struct->svn;
         int32_t otp_svn = 0;
         uint32_t otp_rid[2];
-        // Checks for valid SVN range of 0 - 64
+        // Checks for valid SVN range of 0x0 - 0x40 (0-64 in decimal)
         if (fw_svn > SVN_MAX) {
                 printf("Secure boot: Invalid FW SVN(0x%lx) image flashed. So stopping boot \n",fw_svn);
                 return false;
@@ -177,7 +177,6 @@ bool validate_svn(void)
         otp_read_conf(OTP_REV_ID_OFFSET_1, &otp_rid[0]);
         otp_read_conf(OTP_REV_ID_OFFSET_2, &otp_rid[1]);
         otp_svn = get_rid_num(otp_rid);
-        otp_lock(); //protect otp controller
         if(otp_svn < 0 ) {
             printf("Secure boot: get_rid_num() Failed !!! \n");
             return false;
diff --git a/env/env.c b/env/env.c
index 714db633d7..5d9302461a 100644
--- a/env/env.c
+++ b/env/env.c
@@ -207,11 +207,9 @@ void env_set_otp_svn(void)
 {
     int32_t otp_svn = 0;
     uint32_t otp_rid[2];
-    writel(OTP_PASSWD, OTP_PROTECT_KEY);//unlock otp region
     otp_read_conf(OTP_REV_ID_OFFSET_1, &otp_rid[0]);
     otp_read_conf(OTP_REV_ID_OFFSET_2, &otp_rid[1]);
     otp_svn = get_rid_num(otp_rid);
-    writel(OTP_LOCK_VALUE, OTP_PROTECT_KEY); //protect otp controller
     if (otp_svn >= 0) {
         env_set_ulong("otp-svn", otp_svn);
         env_save();
diff --git a/include/otp.h b/include/otp.h
index 5c7afdb1e4..e7a59f0e0a 100644
--- a/include/otp.h
+++ b/include/otp.h
@@ -5,9 +5,9 @@
  */
 #ifndef	_OTP_H_
 #define	_OTP_H_
-#define SVN_MAX             64
-#define OTP_REV_ID_OFFSET_1 10
-#define OTP_REV_ID_OFFSET_2 11
+#define SVN_MAX             0x40
+#define OTP_REV_ID_OFFSET_1 0xA
+#define OTP_REV_ID_OFFSET_2 0xB
 #define OTP_PASSWD          0x349fe38a
 #define OTP_BASE            0x1e6f2000
 #define OTP_PROTECT_KEY     OTP_BASE
-- 
2.17.1

