From 33d2070b62c2b2b482bf8a84bdd4dd7f295f768d Mon Sep 17 00:00:00 2001
From: Zhikui Ren <zhikui.ren@intel.com>
Date: Mon, 14 Mar 2022 17:27:01 -0700
Subject: [PATCH] systems: Add pfr and cpld postcode

/redfish/v1/Systems/system
CPU cpld postcode provides power sequence state and is added to
BootProgress.
PFR postcode provides platform state and is added to
FirmwareProvisioning when system is PFR provisioned.

Signed-off-by: Zhikui Ren <zhikui.ren@intel.com>
Upstream-Status: Pending
---
 redfish-core/lib/systems.hpp | 113 +++++++++++++++++++++++++++++++++++
 1 file changed, 113 insertions(+)

diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index e044c670..bdffd22a 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -948,6 +948,62 @@ inline void getBootProgressLastStateTime(
     });
 }
 
+/**
+ * @brief Retrieves boot progress of the system
+ *
+ * @param[in] aResp  Shared pointer for generating response message.
+ *
+ * @return None.
+ */
+inline void getCPLDBootProgress(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    BMCWEB_LOG_DEBUG("Get OEM information.");
+    crow::connections::systemBus->async_method_call(
+        [aResp](const boost::system::error_code ec,
+                const std::vector<
+                    std::pair<std::string, dbus::utility::DbusVariantType>>&
+                    propertiesList) {
+        if (ec)
+        {
+            BMCWEB_LOG_DEBUG("DBUS response error {}", ec);
+            // not an error, don't have to have the interface
+            return;
+        }
+
+        const std::string* errorSource = nullptr;
+        const std::string* powerState = nullptr;
+        for (const std::pair<std::string, dbus::utility::DbusVariantType>&
+                 property : propertiesList)
+        {
+            if (property.first == "ErrorSource")
+            {
+                errorSource = std::get_if<std::string>(&property.second);
+            }
+            else if (property.first == "PowerState")
+            {
+                powerState = std::get_if<std::string>(&property.second);
+            }
+        }
+
+        if ((errorSource == nullptr) || (powerState == nullptr))
+        {
+            BMCWEB_LOG_DEBUG("Unable to get CPLD power sequence state.");
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        BMCWEB_LOG_DEBUG("CPLD Boot Progress: {} Err {}", *powerState,
+                         *errorSource);
+        aResp->res.jsonValue["BootProgress"]["Oem"]["CpldLastState"] =
+            *powerState;
+        aResp->res.jsonValue["BootProgress"]["Oem"]["CpldErr"] = *errorSource;
+    },
+        "xyz.openbmc_project.DCSCM.Cpld.Manager",
+        "/xyz/openbmc_project/dcscm/cpld/manager/CPU",
+        "org.freedesktop.DBus.Properties", "GetAll",
+        "xyz.openbmc_project.DCSCM.CPU.PostCode");
+}
+
 /**
  * @brief Retrieves boot override type over DBUS and fills out the response
  *
@@ -2096,6 +2152,61 @@ inline void
 }
 
 #ifdef BMCWEB_ENABLE_REDFISH_PROVISIONING_FEATURE
+/**
+ * @brief Retrieves provisioned platform state
+ *
+ * @param[in] aResp     Shared pointer for completing asynchronous calls.
+ *
+ * @return None.
+ */
+inline void getPlatformState(std::shared_ptr<bmcweb::AsyncResp> aResp)
+{
+    BMCWEB_LOG_DEBUG("Get OEM information.");
+    crow::connections::systemBus->async_method_call(
+        [aResp](const boost::system::error_code ec,
+                const std::vector<
+                    std::pair<std::string, dbus::utility::DbusVariantType>>&
+                    propertiesList) {
+        nlohmann::json& oemPFR =
+            aResp->res
+                .jsonValue["Oem"]["OpenBmc"]["FirmwareProvisioning"]["Status"];
+
+        if (ec)
+        {
+            BMCWEB_LOG_DEBUG("DBUS response error {}", ec);
+            // not an error, don't have to have the interface
+            return;
+        }
+
+        const uint8_t* postcode = nullptr;
+        const std::string* platformState = nullptr;
+        for (const std::pair<std::string, dbus::utility::DbusVariantType>&
+                 property : propertiesList)
+        {
+            if (property.first == "Data")
+            {
+                postcode = std::get_if<uint8_t>(&property.second);
+            }
+            else if (property.first == "PlatformState")
+            {
+                platformState = std::get_if<std::string>(&property.second);
+            }
+        }
+
+        if ((postcode == nullptr) || (platformState == nullptr))
+        {
+            BMCWEB_LOG_DEBUG("Unable to get PFR platform state.");
+            messages::internalError(aResp->res);
+            return;
+        }
+        oemPFR["Data"] = *postcode;
+        oemPFR["PlatformState"] = *platformState;
+    },
+        "xyz.openbmc_project.PFR.Manager", "/xyz/openbmc_project/pfr",
+        "org.freedesktop.DBus.Properties", "GetAll",
+        "xyz.openbmc_project.State.Boot.Platform");
+}
+
 /**
  * @brief Retrieves provisioning status
  *
@@ -2155,6 +2266,7 @@ inline void getProvisioningStatus(std::shared_ptr<bmcweb::AsyncResp> asyncResp)
             {
                 oemPFR["ProvisioningStatus"] = "ProvisionedButNotLocked";
             }
+            getPlatformState(asyncResp);
         }
         else
         {
@@ -3339,6 +3339,7 @@ inline void
     getBootProperties(asyncResp);
     getBootProgress(asyncResp);
     getBootProgressLastStateTime(asyncResp);
+    getCPLDBootProgress(asyncResp);
     pcie_util::getPCIeDeviceList(asyncResp,
                                  nlohmann::json::json_pointer("/PCIeDevices"));
     getHostWatchdogTimer(asyncResp);
-- 
2.25.1

