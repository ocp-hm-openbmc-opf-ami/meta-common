From 1b716d0aca9163b6c91bcfb701fab77c30438264 Mon Sep 17 00:00:00 2001
From: AppaRao Puli <apparao.puli@intel.com>
Date: Fri, 30 Jun 2023 11:39:21 +0000
Subject: [PATCH] Move privileges to separate entity

The privilege property of a rule is currently part of RuleParameterTraits
structure. Moving this property (member function) out into a separate
entity PrivilegeParameterTraits.
This move is required to enable inheriting this entity into Weksockets
and SseSockets.

Tested:
 - bmcweb is functional and is responding to Redfish URI's
 - User Privilege check for URI's is functional.

Change-Id: I288ab12258c15ae5a626f4409fc3b4a9cc574ea3
Signed-off-by: P Dheeraj Srujan Kumar <p.dheeraj.srujan.kumar@intel.com>
Signed-off-by: AppaRao Puli <apparao.puli@intel.com>

Upstream-Status: Pending
---
 http/routing/baserule.hpp                 |  2 ++
 http/routing/dynamicrule.hpp              |  1 +
 http/routing/privilegeparametertraits.hpp | 35 +++++++++++++++++++++++
 http/routing/ruleparametertraits.hpp      |  3 +-
 4 files changed, 40 insertions(+), 1 deletion(-)
 create mode 100644 http/routing/privilegeparametertraits.hpp

diff --git a/http/routing/baserule.hpp b/http/routing/baserule.hpp
index 09130209..56dd6e92 100644
--- a/http/routing/baserule.hpp
+++ b/http/routing/baserule.hpp
@@ -93,6 +93,8 @@ class BaseRule
     friend class Router;
     template <typename T>
     friend struct RuleParameterTraits;
+    template <typename T>
+    friend struct PrivilegeParameterTraits;
 };
 
 } // namespace crow
diff --git a/http/routing/dynamicrule.hpp b/http/routing/dynamicrule.hpp
index 03452d8b..90ec6132 100644
--- a/http/routing/dynamicrule.hpp
+++ b/http/routing/dynamicrule.hpp
@@ -1,5 +1,6 @@
 #pragma once
 #include "baserule.hpp"
+#include "privilegeparametertraits.hpp"
 #include "ruleparametertraits.hpp"
 #include "websocket.hpp"
 
diff --git a/http/routing/privilegeparametertraits.hpp b/http/routing/privilegeparametertraits.hpp
new file mode 100644
index 00000000..b153977e
--- /dev/null
+++ b/http/routing/privilegeparametertraits.hpp
@@ -0,0 +1,35 @@
+#pragma once
+
+#include <initializer_list>
+#include <optional>
+
+namespace crow
+{
+template <typename T>
+struct PrivilegeParameterTraits
+{
+    using self_t = T;
+
+    self_t& privileges(
+        const std::initializer_list<std::initializer_list<const char*>>& p)
+    {
+        self_t* self = static_cast<self_t*>(this);
+        for (const std::initializer_list<const char*>& privilege : p)
+        {
+            self->privilegesSet.emplace_back(privilege);
+        }
+        return *self;
+    }
+
+    template <size_t N, typename... MethodArgs>
+    self_t& privileges(const std::array<redfish::Privileges, N>& p)
+    {
+        self_t* self = static_cast<self_t*>(this);
+        for (const redfish::Privileges& privilege : p)
+        {
+            self->privilegesSet.emplace_back(privilege);
+        }
+        return *self;
+    }
+};
+} // namespace crow
diff --git a/http/routing/ruleparametertraits.hpp b/http/routing/ruleparametertraits.hpp
index bb3f5633..660d61b3 100644
--- a/http/routing/ruleparametertraits.hpp
+++ b/http/routing/ruleparametertraits.hpp
@@ -1,5 +1,6 @@
 #pragma once
 
+#include "privilegeparametertraits.hpp"
 #include "sserule.hpp"
 #include "websocketrule.hpp"
 
@@ -11,7 +12,7 @@
 namespace crow
 {
 template <typename T>
-struct RuleParameterTraits
+struct RuleParameterTraits : public PrivilegeParameterTraits<T>
 {
     using self_t = T;
     WebSocketRule& websocket()
-- 
2.17.1

