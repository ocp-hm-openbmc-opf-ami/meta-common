From 6721f699fdcc04ede6a9603a144caa59fe6c78c3 Mon Sep 17 00:00:00 2001
From: Krzysztof Grobelny <krzysztof.grobelny@intel.com>
Date: Wed, 30 Jun 2021 15:18:46 +0000
Subject: [PATCH] BaseBiosTable: Add support for PATCH operation

This commit brings in support for PATCH operation of the
bios variables that updates the BaseBiosTable.

Tested-By:
* Passed Redfish validator

* Single Attribute:
PATCH https://${bmc}/redfish/v1/Systems/system/Bios/Settings -d
'{"data":[{"AttributeName": <attribute name>, "AttributeType":
<attribute type>, "AttributeValue": <attribute value>}]}'

* Multiple Attributes:
PATCH https://${bmc}/redfish/v1/Systems/system/Bios/Settings -d
'{"data":[{"AttributeName": <attribute name>, "AttributeType":
<attribute type>, "AttributeValue": <attribute value>},
{"AttributeName": <attribute name>, "AttributeType":
<attribute type>, "AttributeValue": <attribute value>}]}'

This makes use of the "Set" of "PendingAttributes" in the
backend and that updates the BaseBiosTable.

Signed-off-by: Kuiying Wang <kuiying.wang@intel.com>
Change-Id: I12e78e5ac623c264c7a3e1dd5198aca67172736d
Upstream-Status: Pending
---
 redfish-core/lib/bios.hpp | 87 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 87 insertions(+)

diff --git a/redfish-core/lib/bios.hpp b/redfish-core/lib/bios.hpp
index e0b41433..7ec499bf 100644
--- a/redfish-core/lib/bios.hpp
+++ b/redfish-core/lib/bios.hpp
@@ -97,6 +97,29 @@ static std::string mapAttrTypeToRedfish(const std::string_view typeDbus)
 
     return ret;
 }
+static std::string mapRedfishToAttrType(const std::string_view type)
+{
+    std::string ret;
+    if (type == "string")
+    {
+        ret = "xyz.openbmc_project.BIOSConfig.Manager.AttributeType.String";
+    }
+    else if (type == "int")
+    {
+        ret = "xyz.openbmc_project.BIOSConfig.Manager.AttributeType.Integer";
+    }
+    else if (type == "enum")
+    {
+        ret = "xyz.openbmc_project.BIOSConfig.Manager.AttributeType."
+              "Enumeration";
+    }
+    else
+    {
+        ret = "UNKNOWN";
+    }
+
+    return ret;
+}
 static std::string mapBoundTypeToRedfish(const std::string_view typeDbus)
 {
     std::string ret;
@@ -349,6 +372,70 @@ inline void requestRoutesBiosSettings(App& app)
             "/xyz/openbmc_project/bios_config/manager",
             std::array<const char*, 0>());
         });
+
+    BMCWEB_ROUTE(app, "/redfish/v1/Systems/system/Bios/Settings")
+        .privileges({{"ConfigureComponents"}})
+        .methods(boost::beast::http::verb::patch)(
+            [](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& asyncResp) {
+        nlohmann::json inpJson;
+
+        if (!redfish::json_util::readJsonPatch(req, asyncResp->res, "data",
+                                               inpJson))
+        {
+            return;
+        }
+
+        for (auto& attrInfo : inpJson)
+        {
+            std::string attrName;
+            std::string attrType;
+            std::string attrValue;
+            if (!json_util::readJson(attrInfo, asyncResp->res, "AttributeName",
+                                     attrName))
+            {
+                return;
+            }
+            if (!json_util::readJson(attrInfo, asyncResp->res, "AttributeType",
+                                     attrType))
+            {
+                return;
+            }
+            if (!json_util::readJson(attrInfo, asyncResp->res, "AttributeValue",
+                                     attrValue))
+            {
+                return;
+            }
+            std::string biosAttrType = mapRedfishToAttrType(attrType);
+
+            if (biosAttrType == "UNKNOWN")
+            {
+                BMCWEB_LOG_ERROR("Invalid attribute type");
+                messages::propertyValueNotInList(asyncResp->res,
+                                                 "AttributeType", attrType);
+                return;
+            }
+
+            PendingAttributesType pendingAttributes;
+            pendingAttributes.emplace_back(std::make_pair(
+                attrName, std::make_tuple(biosAttrType, attrValue)));
+
+            crow::connections::systemBus->async_method_call(
+                [asyncResp](const boost::system::error_code ec) {
+                if (ec)
+                {
+                    BMCWEB_LOG_ERROR("doPatch resp_handler got error {}", ec);
+                    messages::internalError(asyncResp->res);
+                    return;
+                }
+                },
+                "xyz.openbmc_project.BIOSConfigManager",
+                "/xyz/openbmc_project/bios_config/manager",
+                "org.freedesktop.DBus.Properties", "Set",
+                "xyz.openbmc_project.BIOSConfig.Manager", "PendingAttributes",
+                std::variant<PendingAttributesType>(pendingAttributes));
+        }
+        });
 }
 /**
  * BiosAttributeRegistry class supports handle get method for BIOS attribute
-- 
2.25.1

