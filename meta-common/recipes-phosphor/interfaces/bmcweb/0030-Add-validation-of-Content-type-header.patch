From 83427270422f4873b04acbc63578c72bf3f8db8c Mon Sep 17 00:00:00 2001
From: Karol Niczyj <karol.niczyj@intel.com>
Date: Thu, 7 Oct 2021 11:06:41 +0200
Subject: [PATCH] Add validation of Content-type header

Content-type header should be validated according to OWASP:
cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html
This also prevents CSRF attacks, because Forged Requests cannot have
application/json Content-Type. Currently CSRF attacks are possible when
using mTLS authentication, because there is no checking of XSRF token
(each request creates new session).

Tested manually.

Signed-off-by: Karol Niczyj <karol.niczyj@intel.com>
---
 include/openbmc_dbus_rest.hpp            | 29 ++++++++++++++++++++++--
 redfish-core/include/error_messages.hpp  | 11 +++++++++
 redfish-core/lib/certificate_service.hpp |  4 +++-
 redfish-core/lib/task.hpp                |  5 +++-
 redfish-core/src/error_messages.cpp      | 26 +++++++++++++++++++++
 redfish-core/src/utils/json_utils.cpp    | 13 +++++++++++
 6 files changed, 84 insertions(+), 4 deletions(-)

diff --git a/include/openbmc_dbus_rest.hpp b/include/openbmc_dbus_rest.hpp
index 95503d70..12799ba9 100644
--- a/include/openbmc_dbus_rest.hpp
+++ b/include/openbmc_dbus_rest.hpp
@@ -79,6 +79,7 @@ const constexpr char* notFoundMsg = "404 Not Found";
 const constexpr char* badReqMsg = "400 Bad Request";
 const constexpr char* methodNotAllowedMsg = "405 Method Not Allowed";
 const constexpr char* forbiddenMsg = "403 Forbidden";
+const constexpr char* unsupportedMediaMsg = "415 Unsupported Media Type";
 const constexpr char* methodFailedMsg = "500 Method Call Failed";
 const constexpr char* methodOutputFailedMsg = "500 Method Output Error";
 const constexpr char* notFoundDesc =
@@ -86,6 +87,8 @@ const constexpr char* notFoundDesc =
 const constexpr char* propNotFoundDesc =
     "The specified property cannot be found";
 const constexpr char* noJsonDesc = "No JSON object could be decoded";
+const constexpr char* invalidContentType =
+    "Content-type header is missing or invalid";
 const constexpr char* methodNotFoundDesc =
     "The specified method cannot be found";
 const constexpr char* methodNotAllowedDesc = "Method not allowed";
@@ -1541,9 +1544,16 @@ inline void handleAction(const crow::Request& req,
 {
     BMCWEB_LOG_DEBUG << "handleAction on path: " << objectPath << " and method "
                      << methodName;
+    std::string_view contentType = req.getHeaderValue("content-type");
+    if (!boost::starts_with(contentType, "application/json"))
+    {
+        setErrorResponse(asyncResp->res,
+                         boost::beast::http::status::unsupported_media_type,
+                         invalidContentType, unsupportedMediaMsg);
+        return;
+    }
     nlohmann::json requestDbusData =
         nlohmann::json::parse(req.body, nullptr, false);
-
     if (requestDbusData.is_discarded())
     {
         setErrorResponse(asyncResp->res,
@@ -1856,10 +1866,17 @@ inline void handlePut(const crow::Request& req,
                          forbiddenResDesc, forbiddenMsg);
         return;
     }
+    std::string_view contentType = req.getHeaderValue("content-type");
+    if (!boost::starts_with(contentType, "application/json"))
+    {
+        setErrorResponse(asyncResp->res,
+                         boost::beast::http::status::unsupported_media_type,
+                         invalidContentType, unsupportedMediaMsg);
+        return;
+    }
 
     nlohmann::json requestDbusData =
         nlohmann::json::parse(req.body, nullptr, false);
-
     if (requestDbusData.is_discarded())
     {
         setErrorResponse(asyncResp->res,
@@ -2396,6 +2413,14 @@ inline void
             return;
         }
 
+        std::string_view contentType = req.getHeaderValue("content-type");
+        if (!boost::starts_with(contentType, "application/json"))
+        {
+            setErrorResponse(asyncResp->res,
+                             boost::beast::http::status::unsupported_media_type,
+                             invalidContentType, unsupportedMediaMsg);
+            return;
+        }
         nlohmann::json requestDbusData =
             nlohmann::json::parse(req.body, nullptr, false);
 
diff --git a/redfish-core/include/error_messages.hpp b/redfish-core/include/error_messages.hpp
index 6501d6a0..f603203b 100644
--- a/redfish-core/include/error_messages.hpp
+++ b/redfish-core/include/error_messages.hpp
@@ -59,6 +59,17 @@ nlohmann::json malformedJSON();
 
 void malformedJSON(crow::Response& res);
 
+/**
+ * @brief Formats InvalidContentType message into JSON
+ * Message body: "The request body submitted has unsupported, missing
+ * or invalid Content-Type header"
+ *
+ *
+ * @returns Message InvalidContentType formatted to JSON */
+nlohmann::json invalidContentType();
+
+void invalidContentType(crow::Response& res);
+
 /**
  * @brief Formats ResourceMissingAtURI message into JSON
  * Message body: "The resource at the URI <arg1> was not found."
diff --git a/redfish-core/lib/certificate_service.hpp b/redfish-core/lib/certificate_service.hpp
index ebd9436f..1404ce89 100644
--- a/redfish-core/lib/certificate_service.hpp
+++ b/redfish-core/lib/certificate_service.hpp
@@ -94,9 +94,11 @@ inline std::string getCertificateFromReqBody(
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
     const crow::Request& req)
 {
+    std::string_view contentType = req.getHeaderValue("content-type");
     nlohmann::json reqJson = nlohmann::json::parse(req.body, nullptr, false);
 
-    if (reqJson.is_discarded())
+    if (reqJson.is_discarded() ||
+        !boost::starts_with(contentType, "application/json"))
     {
         // We did not receive JSON request, proceed as it is RAW data
         return req.body;
diff --git a/redfish-core/lib/task.hpp b/redfish-core/lib/task.hpp
index b40d522d..0dab26f5 100644
--- a/redfish-core/lib/task.hpp
+++ b/redfish-core/lib/task.hpp
@@ -51,7 +51,10 @@ struct Payload
                                field_ns::connection, field_ns::content_length,
                                field_ns::upgrade};
 
-        if (jsonBody.is_discarded())
+        std::string_view contentType = req.getHeaderValue("content-type");
+        jsonBody = nlohmann::json::parse(req.body, nullptr, false);
+        if (jsonBody.is_discarded() ||
+            !boost::starts_with(contentType, "application/json"))
         {
             jsonBody = nullptr;
         }
diff --git a/redfish-core/src/error_messages.cpp b/redfish-core/src/error_messages.cpp
index b93ed030..cfbcf879 100644
--- a/redfish-core/src/error_messages.cpp
+++ b/redfish-core/src/error_messages.cpp
@@ -164,6 +164,32 @@ void malformedJSON(crow::Response& res)
     addMessageToErrorJson(res.jsonValue, malformedJSON());
 }
 
+/**
+ * @internal
+ * @brief Formats InvalidContentType message into JSON
+ *
+ * See header file for more information
+ * @endinternal
+ */
+nlohmann::json invalidContentType(void)
+{
+    return nlohmann::json{
+        {"@odata.type", "#Message.v1_1_1.Message"},
+        {"MessageId", "Base.1.8.1.InvalidContentType"},
+        {"Message", "The request body submitted has unsupported, missing "
+                    "or invalid Content-Type header."},
+        {"MessageArgs", nlohmann::json::array()},
+        {"MessageSeverity", "Critical"},
+        {"Resolution", "Ensure that the request body has proper "
+                       "Content-Type header set."}};
+}
+
+void invalidContentType(crow::Response& res)
+{
+    res.result(boost::beast::http::status::bad_request);
+    addMessageToErrorJson(res.jsonValue, invalidContentType());
+}
+
 /**
  * @internal
  * @brief Formats ResourceMissingAtURI message into JSON
diff --git a/redfish-core/src/utils/json_utils.cpp b/redfish-core/src/utils/json_utils.cpp
index a47b4d82..44b2830b 100644
--- a/redfish-core/src/utils/json_utils.cpp
+++ b/redfish-core/src/utils/json_utils.cpp
@@ -15,6 +15,10 @@
 */
 #include "utils/json_utils.hpp"
 
+#include <boost/algorithm/string/predicate.hpp>
+
+#include <string_view>
+
 namespace redfish
 {
 
@@ -24,6 +28,15 @@ namespace json_util
 bool processJsonFromRequest(crow::Response& res, const crow::Request& req,
                             nlohmann::json& reqJson)
 {
+    std::string_view contentType = req.getHeaderValue("content-type");
+    if (!boost::starts_with(contentType, "application/json"))
+    {
+        messages::invalidContentType(res);
+
+        res.end();
+
+        return false;
+    }
     reqJson = nlohmann::json::parse(req.body, nullptr, false);
 
     if (reqJson.is_discarded())
-- 
2.17.1

