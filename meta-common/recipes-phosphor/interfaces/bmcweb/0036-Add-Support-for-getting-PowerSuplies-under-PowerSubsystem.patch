From a502a6a06ad2414f9d0a2ae457a1ace423f88f59 Mon Sep 17 00:00:00 2001
From: Krzysztof Grobelny <krzysztof.grobelny@intel.com>
Date: Mon, 13 Mar 2023 14:10:54 +0000
Subject: [PATCH] Power Suplies The "Power" and "Thermal" properties under
 "Chassis" redfish schema are deprecated in favor of "PowerSubsystem" and
 "ThermalSubsytem". Power supply information was used to present under this
 "Power" node which is removed during migration to "PowerSubsystem" DTMF
 redfish schema implementation.

This commit implement the "PowerSupplyCollections" & "PowerSupply" redfish schema
under the "PowerSubssystem" as per new Redfish specification.

Below functionalities implemented in this commit.

Get power supplies collections URIs
Get power supplies info
Tested:

verified the power subsystem collections

Get session details from Redfish GET:https://redfish/v1/Chassis/BNC_Baseboard/PowerSubsystem/PowerSupplies response:
"@odata.type": "#PowerSupplyCollection.PowerSupplyCollection",
"Members": [
{
"@odata.id": "/redfish/v1/Chassis/AVC_Baseboard/PowerSubsystem/PowerSupplies/SOLUM_CO_IS162F22_PSU1"
},
{
"@odata.id": "/redfish/v1/Chassis/AVC_Baseboard/PowerSubsystem/PowerSupplies/SOLUM_CO_IS162F22_PSU2"
}
"Members@odata.count": 2,
"Name": "Power Supply Collection"
After getting collection URIs

     GET: "/redfish/v1/Chassis/BNC_Baseboard/PowerSubsytem/PowerSupplies/SOLUM_CO_IS162F22_PSU1",
     "Manufacturer": "SOLUM CO., LTD.                  ",
     "MemberId": "SOLUM_CO_IS162F22_PSU1",
     "Model": "IS162F22",
     "Name": "SOLUM CO IS162F22 PSU1",
     "PartNumber": "G36234-019",
     "PowerInputWatts": 294.5,
     "PowerOutputWatts": 334.5,
     "SerialNumber": "PSSF162202ACNS1622A4BN1H0123",
     "Status": {
         "Health": "OK",
         "State": "Enabled"
     }
 }

Signed-off-by: Kondiboina, VengaiahX <vengaiahx.kondiboina@intel.com>
---
 redfish-core/lib/power_supply.hpp | 68 +++++++++++++++----------------
 redfish-core/lib/sensors.hpp      | 56 ++++++++++++++++++-------
 2 files changed, 73 insertions(+), 51 deletions(-)

diff --git a/redfish-core/lib/power_supply.hpp b/redfish-core/lib/power_supply.hpp
index ebc61c50..d92b49df 100644
--- a/redfish-core/lib/power_supply.hpp
+++ b/redfish-core/lib/power_supply.hpp
@@ -58,29 +58,15 @@ inline void
         "/redfish/v1/Chassis/{}/PowerSubsystem/PowerSupplies", chassisId);
     asyncResp->res.jsonValue["Description"] =
         "The collection of PowerSupply resource instances.";
-    asyncResp->res.jsonValue["Members"] = nlohmann::json::array();
-    asyncResp->res.jsonValue["Members@odata.count"] = 0;
 
-    std::string powerPath = *validChassisPath + "/powered_by";
-    dbus::utility::getAssociationEndPoints(
-        powerPath, [asyncResp, chassisId](
-                       const boost::system::error_code& ec,
-                       const dbus::utility::MapperEndPoints& endpoints) {
-            if (ec)
-            {
-                if (ec.value() != EBADR)
-                {
-                    BMCWEB_LOG_ERROR << "DBUS response error" << ec.value();
-                    messages::internalError(asyncResp->res);
-                }
-                return;
-            }
-
-            for (const auto& endpoint : endpoints)
-            {
-                updatePowerSupplyList(asyncResp, chassisId, endpoint);
-            }
-        });
+    constexpr std::array<std::string_view, 1> interface {
+        "xyz.openbmc_project.Inventory.Item.PowerSupply"
+    };
+    collection_util::getCollectionMembers(
+        asyncResp,
+        boost::urls::format(
+            "/redfish/v1/Chassis/{}/PowerSubsystem/PowerSupplies", chassisId),
+        interface);
 }
 
 inline void handlePowerSupplyCollectionHead(
@@ -123,6 +109,24 @@ inline void handlePowerSupplyCollectionGet(
         std::bind_front(doPowerSupplyCollection, asyncResp, chassisId));
 }
 
+inline void doPowerSupply(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                          const std::string& chassisId,
+                          const std::optional<std::string>& validChassisPath)
+{
+    if (!validChassisPath)
+    {
+        messages::resourceNotFound(asyncResp->res, "Chassis", chassisId);
+        return;
+    }
+
+    auto sensorAsyncResp = std::make_shared<SensorsAsyncResp>(
+        asyncResp, chassisId, sensors::dbus::powerPaths, sensors::node::power);
+
+    getChassisData(sensorAsyncResp);
+
+    return;
+}
+
 inline void requestRoutesPowerSupplyCollection(App& app)
 {
     BMCWEB_ROUTE(app, "/redfish/v1/Chassis/<str>/PowerSubsystem/PowerSupplies/")
@@ -203,20 +207,12 @@ inline void
         return;
     }
 
-    // Get the correct Path and Service that match the input parameters
-    getValidPowerSupplyPath(asyncResp, *validChassisPath, powerSupplyId,
-                            [asyncResp, chassisId, powerSupplyId]() {
-        asyncResp->res.addHeader(
-            boost::beast::http::field::link,
-            "</redfish/v1/JsonSchemas/PowerSupply/PowerSupply.json>; rel=describedby");
-        asyncResp->res.jsonValue["@odata.type"] =
-            "#PowerSupply.v1_5_0.PowerSupply";
-        asyncResp->res.jsonValue["Name"] = "Power Supply";
-        asyncResp->res.jsonValue["Id"] = powerSupplyId;
-        asyncResp->res.jsonValue["@odata.id"] = boost::urls::format(
-            "/redfish/v1/Chassis/{}/PowerSubsystem/PowerSupplies/{}", chassisId,
-            powerSupplyId);
-    });
+    asyncResp->res.jsonValue["Id"] = powerSupplyId;
+
+    auto sensorAsyncResp = std::make_shared<SensorsAsyncResp>(
+        asyncResp, chassisId, sensors::dbus::powerPaths, sensors::node::power);
+
+    getChassisData(sensorAsyncResp);
 }
 
 inline void
diff --git a/redfish-core/lib/sensors.hpp b/redfish-core/lib/sensors.hpp
index a84f9496..ade5fd60 100644
--- a/redfish-core/lib/sensors.hpp
+++ b/redfish-core/lib/sensors.hpp
@@ -61,7 +61,6 @@ static constexpr std::string_view thermal = "Thermal";
 namespace dbus
 {
 constexpr auto powerPaths = std::to_array<std::string_view>({
-    "/xyz/openbmc_project/sensors/voltage",
     "/xyz/openbmc_project/sensors/power"
 });
 
@@ -482,15 +481,12 @@ inline void reduceSensorList(
 inline void populateChassisNode(nlohmann::json& jsonValue,
                                 std::string_view chassisSubNode)
 {
-    if (chassisSubNode == sensors::node::power)
-    {
-        jsonValue["@odata.type"] = "#Power.v1_5_2.Power";
-    }
-    else if (chassisSubNode == sensors::node::thermal)
+    if (chassisSubNode == sensors::node::thermal)
     {
         jsonValue["@odata.type"] = "#Thermal.v1_4_0.Thermal";
         jsonValue["Fans"] = nlohmann::json::array();
         jsonValue["Temperatures"] = nlohmann::json::array();
+        jsonValue["Id"] = chassisSubNode;
     }
     else if (chassisSubNode == sensors::node::sensors)
     {
@@ -500,11 +496,10 @@ inline void populateChassisNode(nlohmann::json& jsonValue,
         jsonValue["Members@odata.count"] = 0;
     }
 
-    if (chassisSubNode != sensors::node::sensors)
+    if (chassisSubNode != sensors::node::power)
     {
-        jsonValue["Id"] = chassisSubNode;
+        jsonValue["Name"] = chassisSubNode;
     }
-    jsonValue["Name"] = chassisSubNode;
 }
 
 /**
@@ -561,8 +556,11 @@ void getChassis(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
         }
         populateChassisNode(asyncResp->res.jsonValue, chassisSubNode);
 
-        asyncResp->res.jsonValue["@odata.id"] = boost::urls::format(
-            "/redfish/v1/Chassis/{}/{}", chassisIdStr, chassisSubNode);
+        if (chassisSubNode != sensors::node::power)
+        {
+            asyncResp->res.jsonValue["@odata.id"] = boost::urls::format(
+                "/redfish/v1/Chassis/{}/{}", chassisIdStr, chassisSubNode);
+        }
 
         // Get the list of all sensors for this Chassis element
         std::string sensorPath = *chassisPath + "/all_sensors";
@@ -2204,9 +2202,10 @@ inline nlohmann::json& getPowerSupply(nlohmann::json& powerSupplyArray,
                                       const std::string& chassisId)
 {
     // Check if matching PowerSupply object already exists in JSON array
+
     for (nlohmann::json& powerSupply : powerSupplyArray)
     {
-        if (powerSupply["Name"] ==
+        if (powerSupply["Id"] ==
             boost::replace_all_copy(inventoryItem.name, "_", " "))
         {
             return powerSupply;
@@ -2219,7 +2218,11 @@ inline nlohmann::json& getPowerSupply(nlohmann::json& powerSupplyArray,
     boost::urls::url url = boost::urls::format("/redfish/v1/Chassis/{}/Power",
                                                chassisId);
     url.set_fragment(("/PowerSupplies"_json_pointer).to_string());
-    powerSupply["@odata.id"] = std::move(url);
+    powerSupply["@odata.id"] = "/redfish/v1/Chassis/" + chassisId +
+                               "/PowerSubsystem/PowerSupplies/" +
+                               inventoryItem.name;
+    powerSupply["@odata.type"] = "#PowerSupply.v1_5_0.PowerSupply";
+    powerSupply["Id"] = boost::replace_all_copy(inventoryItem.name, "_", " ");
     powerSupply["Name"] = boost::replace_all_copy(inventoryItem.name, "_", " ");
     powerSupply["Manufacturer"] = inventoryItem.manufacturer;
     powerSupply["Model"] = inventoryItem.model;
@@ -2236,7 +2239,6 @@ inline nlohmann::json& getPowerSupply(nlohmann::json& powerSupplyArray,
     powerSupply["Status"]["State"] = getState(&inventoryItem);
     const char* health = inventoryItem.isFunctional ? "OK" : "Critical";
     powerSupply["Status"]["Health"] = health;
-
     return powerSupply;
 }
 
@@ -2292,6 +2294,7 @@ inline void getSensorData(
             {
                 const std::string& objPath =
                     static_cast<const std::string&>(objDictEntry.first);
+
                 BMCWEB_LOG_DEBUG << "getManagedObjectsCb parsing object "
                                  << objPath;
 
@@ -2311,6 +2314,7 @@ inline void getSensorData(
                 // string at the beginning
                 const std::string& sensorType = split[4];
                 const std::string& sensorName = split[5];
+
                 BMCWEB_LOG_DEBUG << "sensorName " << sensorName
                                  << " sensorType " << sensorType;
                 if (sensorNames->find(objPath) == sensorNames->end())
@@ -2376,7 +2380,16 @@ inline void getSensorData(
                         else if ((inventoryItem != nullptr) &&
                                  (inventoryItem->isPowerSupply))
                         {
-                            fieldName = "PowerSupplies";
+                            if (inventoryItem->name ==
+                                sensorsAsyncResp->asyncResp->res
+                                    .jsonValue["Id"])
+                            {
+                                fieldName = "PowerSupplies";
+                            }
+                            else
+                            {
+                                continue;
+                            }
                         }
                         else
                         {
@@ -2469,8 +2482,21 @@ inline void getSensorData(
                     sensorsAsyncResp->addMetadata(*sensorJson, path);
                 }
             }
+
             if (sensorsAsyncResp.use_count() == 1)
             {
+                if (sensorsAsyncResp->chassisSubNode == sensors::node::power)
+                {
+                    // nlohmann::json& tempArray =
+                    // sensorsAsyncResp->asyncResp->res.jsonValue
+                    if (sensorsAsyncResp->asyncResp->res
+                            .jsonValue["PowerSupplies"] != nullptr)
+                    {
+                        sensorsAsyncResp->asyncResp->res.jsonValue =
+                            sensorsAsyncResp->asyncResp->res
+                                .jsonValue["PowerSupplies"][0];
+                    }
+                }
                 sortJSONResponse(sensorsAsyncResp);
                 if (sensorsAsyncResp->chassisSubNode ==
                         sensors::node::sensors &&
-- 
2.25.1

