From 7047223d54908d50585fb255f349b59b0202bf74 Mon Sep 17 00:00:00 2001
From: P Dheeraj Srujan Kumar <p.dheeraj.srujan.kumar@intel.com>
Date: Fri, 11 Feb 2022 05:26:19 +0530
Subject: [PATCH] Add Configure Self support for Event Subscriptions

PATCH and DELETE operations on event subscriptions require
ConfigureManager or ConfigureSelf privilege.
Currently, only ConfigureManager support was enabled, which implies only
Admin user will be able to PATCH and DELETE any given subscription.
This commits adds the support to enable ConfigureSelf, which implies, an
Operator user will be able to PATCH or DELETE self created subscription.
This support is enabled by adding SubscriptionOwner field to the
Subscriptions class, so that the Owner of the subscription will be
stored when a subscription is created.

Tested:
 - Created 2 Operator level users - Operator1 and Operator2
 - Created subscription by POST to
   /redfish/v1/EventService/Subscriptions using Operator1
 - PATCH and DELETE on the subscription failed successfully when using
   Operator2 user.
 - PATCH and DELETE was successfull when using Operator1 user.
 - Admin user was able to successfully PATCH and DELETE subscriptions
   created by Operator1 and Operator2

Signed-off-by: P Dheeraj Srujan Kumar <p.dheeraj.srujan.kumar@intel.com>
Signed-off-by: Gayathri Leburu <gayathri.leburu@intel.com>
Change-Id: I5146f230b2a5670137efc20c4aecc7dc4a00a5d5
---
 include/event_service_store.hpp               | 11 +++
 include/persistent_data.hpp                   |  1 +
 .../include/event_service_manager.hpp         |  2 +
 redfish-core/lib/event_service.hpp            | 74 ++++++++++++++++---
 4 files changed, 77 insertions(+), 11 deletions(-)

diff --git a/include/event_service_store.hpp b/include/event_service_store.hpp
index dcc99f10..389960ee 100644
--- a/include/event_service_store.hpp
+++ b/include/event_service_store.hpp
@@ -22,6 +22,7 @@ struct UserSubscription
     std::vector<std::string> resourceTypes;
     boost::beast::http::fields httpHeaders;
     std::vector<std::string> metricReportDefinitions;
+    std::string owner;
 
     static std::shared_ptr<UserSubscription>
         fromJson(const nlohmann::json& j, const bool loadFromOldConfig = false)
@@ -172,6 +173,16 @@ struct UserSubscription
                     subvalue->metricReportDefinitions.emplace_back(*value);
                 }
             }
+            else if (element.key() == "Owner")
+            {
+                const std::string* value =
+                    element.value().get_ptr<const std::string*>();
+                if (value == nullptr)
+                {
+                    continue;
+                }
+                subvalue->owner = *value;
+            }
             else
             {
                 BMCWEB_LOG_ERROR
diff --git a/include/persistent_data.hpp b/include/persistent_data.hpp
index 7ba2d918..0c63e3b6 100644
--- a/include/persistent_data.hpp
+++ b/include/persistent_data.hpp
@@ -311,6 +311,7 @@ class ConfigFile
             subscription["SubscriptionType"] = subValue->subscriptionType;
             subscription["MetricReportDefinitions"] =
                 subValue->metricReportDefinitions;
+            subscription["Owner"] = subValue->owner;
 
             subscriptions.push_back(std::move(subscription));
         }
diff --git a/redfish-core/include/event_service_manager.hpp b/redfish-core/include/event_service_manager.hpp
index 5a27fdcc..af9b2c6d 100644
--- a/redfish-core/include/event_service_manager.hpp
+++ b/redfish-core/include/event_service_manager.hpp
@@ -740,6 +740,7 @@ class EventServiceManager
             subValue->resourceTypes = newSub->resourceTypes;
             subValue->httpHeaders = newSub->httpHeaders;
             subValue->metricReportDefinitions = newSub->metricReportDefinitions;
+            subValue->owner = newSub->owner;
 
             if (subValue->id.empty())
             {
@@ -992,6 +993,7 @@ class EventServiceManager
         newSub->resourceTypes = subValue->resourceTypes;
         newSub->httpHeaders = subValue->httpHeaders;
         newSub->metricReportDefinitions = subValue->metricReportDefinitions;
+        newSub->owner = subValue->owner;
         persistent_data::EventServiceStore::getInstance()
             .subscriptionsConfigMap.emplace(newSub->id, newSub);
 
diff --git a/redfish-core/lib/event_service.hpp b/redfish-core/lib/event_service.hpp
index 2919d2bd..73338524 100644
--- a/redfish-core/lib/event_service.hpp
+++ b/redfish-core/lib/event_service.hpp
@@ -292,6 +292,13 @@ inline void requestRoutesEventDestinationCollection(App& app)
             std::make_shared<Subscription>(host, port, path, urlProto);
 
         subValue->destinationUrl = destUrl;
+        if (req.session == nullptr || req.session->username.empty())
+        {
+            BMCWEB_LOG_ERROR << "Request Session Undefined";
+            messages::noValidSession(asyncResp->res);
+            return;
+        }
+        subValue->owner = req.session->username;
 
         if (subscriptionType)
         {
@@ -505,6 +512,43 @@ inline void requestRoutesEventDestinationCollection(App& app)
         });
 }
 
+bool isConfigureManagerOrSelf(const crow::Request& req,
+                              const std::shared_ptr<Subscription>& subValue)
+{
+    Privileges effectiveUserPrivileges =
+        redfish::getUserPrivileges(req.userRole);
+    bool isConfigureManager =
+        effectiveUserPrivileges.isSupersetOf({"ConfigureManager"});
+
+    if (!isConfigureManager)
+    {
+        // If the user does not have Configure manager privilege
+        // then the user must be an Operator (i.e. Configure
+        // Components and Self)
+        // We need to ensure that the User is the actual owner of
+        // the Subscription being patched
+        // This also supports backward compatibility as subscription
+        // owner would be empty which would not be equal to current
+        // user, enabling only Admin to be able to patch the
+        // Subscription
+
+        if (req.session == nullptr || req.session->username.empty())
+        {
+            BMCWEB_LOG_ERROR
+                << "Insufficient Privilege. Request Session Undefined";
+            return false;
+        }
+
+        if (subValue->owner != req.session->username)
+        {
+            BMCWEB_LOG_ERROR
+                << "Insufficient Privilege. User is not the owner of this Subscription";
+            return false;
+        }
+    }
+    return true;
+}
+
 inline void requestRoutesEventDestination(App& app)
 {
     BMCWEB_ROUTE(app, "/redfish/v1/EventService/Subscriptions/<str>/")
@@ -556,11 +600,7 @@ inline void requestRoutesEventDestination(App& app)
         asyncResp->res.jsonValue["MetricReportDefinitions"] = mrdJsonArray;
         });
     BMCWEB_ROUTE(app, "/redfish/v1/EventService/Subscriptions/<str>/")
-        // The below privilege is wrong, it should be ConfigureManager OR
-        // ConfigureSelf
-        // https://github.com/openbmc/bmcweb/issues/220
-        //.privileges(redfish::privileges::patchEventDestination)
-        .privileges({{"ConfigureManager"}})
+        .privileges(redfish::privileges::patchEventDestination)
         .methods(boost::beast::http::verb::patch)(
             [&app](const crow::Request& req,
                    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -577,6 +617,12 @@ inline void requestRoutesEventDestination(App& app)
             return;
         }
 
+        if (!isConfigureManagerOrSelf(req, subValue))
+        {
+            messages::insufficientPrivilege(asyncResp->res);
+            return;
+        }
+
         std::optional<std::string> context;
         std::optional<std::string> retryPolicy;
         std::optional<std::vector<nlohmann::json>> headers;
@@ -632,11 +678,7 @@ inline void requestRoutesEventDestination(App& app)
         EventServiceManager::getInstance().updateSubscription(param);
         });
     BMCWEB_ROUTE(app, "/redfish/v1/EventService/Subscriptions/<str>/")
-        // The below privilege is wrong, it should be ConfigureManager OR
-        // ConfigureSelf
-        // https://github.com/openbmc/bmcweb/issues/220
-        //.privileges(redfish::privileges::deleteEventDestination)
-        .privileges({{"ConfigureManager"}})
+        .privileges(redfish::privileges::deleteEventDestination)
         .methods(boost::beast::http::verb::delete_)(
             [&app](const crow::Request& req,
                    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -645,11 +687,21 @@ inline void requestRoutesEventDestination(App& app)
         {
             return;
         }
-        if (!EventServiceManager::getInstance().isSubscriptionExist(param))
+
+        std::shared_ptr<Subscription> subValue =
+            EventServiceManager::getInstance().getSubscription(param);
+        if (subValue == nullptr)
         {
             asyncResp->res.result(boost::beast::http::status::not_found);
             return;
         }
+
+        if (!isConfigureManagerOrSelf(req, subValue))
+        {
+            messages::insufficientPrivilege(asyncResp->res);
+            return;
+        }
+
         EventServiceManager::getInstance().deleteSubscription(param);
         });
 }
-- 
2.25.1

