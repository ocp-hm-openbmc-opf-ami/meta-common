From 780f34107218d56b5abaa0107c3788d03ce50392 Mon Sep 17 00:00:00 2001
From: P Dheeraj Srujan Kumar <p.dheeraj.srujan.kumar@intel.com>
Date: Tue, 18 Jul 2023 04:00:51 +0530
Subject: [PATCH] Add EventService SSE filter support

This commit implements the Event Service SSE stream
filters support. As per redfish specification:
The SSE streams have these formats:
 - Metric report SSE stream
 - Event message SSE stream

To reduce the amount of data, service supports $filter
query parameter in SSE URI.
Below properties support as filter criteria:
 - EventFormatType( Event & MetricReport)
 - MessageId
 - RegistryPrefix
 - MetricReportDefinition

For more details, refer Redfish specification section 13.5.2

Tested:
 Created SSE stream with different filters and observed
 desired events on SSE stream client(browser), some examples
  - To get all Redfish events,
    URI: /redfish/v1/EventService/Subscriptions/SSE?$filter=(EventFormatType%20eq%20Event)
  - To get Redfish events with RegistryPrefix "OpenBMC"
    URI: /redfish/v1/EventService/Subscriptions/SSE?$filter=(RegistryPrefix%20eq%20OpenBMC)
  - To get only DC power of Events,
    URI: /redfish/v1/EventService/Subscriptions/SSE?$filter=(EventFormatType%20eq%20Event)%20and%20(MessageId%20eq%20DCPowerOff)

Signed-off-by: AppaRao Puli <apparao.puli@linux.intel.com>
Signed-off-by: P Dheeraj Srujan Kumar <p.dheeraj.srujan.kumar@intel.com>
---
 redfish-core/include/error_messages.hpp |   9 ++
 redfish-core/lib/eventservice_sse.hpp   | 140 +++++++++++++++++++++++-
 redfish-core/src/error_messages.cpp     |  26 +++++
 3 files changed, 173 insertions(+), 2 deletions(-)

diff --git a/redfish-core/include/error_messages.hpp b/redfish-core/include/error_messages.hpp
index 6c5952d7..e2e1b2f0 100644
--- a/redfish-core/include/error_messages.hpp
+++ b/redfish-core/include/error_messages.hpp
@@ -1083,6 +1083,15 @@ nlohmann::json arraySizeTooLong(std::string_view property, uint64_t length);
 void arraySizeTooLong(crow::Response& res, std::string_view property,
                       uint64_t length);
 
+/**
+ * @brief Formats InvalidQueryFilter message into JSON
+ * Message body: "The requested URL contains the invalid query filters"
+ *
+ * @returns Message InvalidQueryFilter formatted to JSON */
+nlohmann::json invalidQueryFilter();
+
+void invalidQueryFilter(crow::Response& res);
+
 } // namespace messages
 
 } // namespace redfish
diff --git a/redfish-core/lib/eventservice_sse.hpp b/redfish-core/lib/eventservice_sse.hpp
index 46a07ed0..071c0660 100644
--- a/redfish-core/lib/eventservice_sse.hpp
+++ b/redfish-core/lib/eventservice_sse.hpp
@@ -8,7 +8,7 @@ namespace redfish
 
 inline void
     createSubscription(std::shared_ptr<crow::sse_socket::Connection>& conn,
-                       const crow::Request& /*req*/,
+                       const crow::Request& req,
                        const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 {
     EventServiceManager& manager =
@@ -20,6 +20,138 @@ inline void
         messages::eventSubscriptionLimitExceeded(asyncResp->res);
         return;
     }
+
+    BMCWEB_LOG_DEBUG("Request query param size: {}", req.url().params().size());
+
+    // EventService SSE supports only "$filter" query param.
+    if (req.url().params().size() > 1)
+    {
+        messages::invalidQueryFilter(asyncResp->res);
+        return;
+    }
+    std::string evtFormatType;
+    std::string queryFilters;
+    if (req.url().params().size())
+    {
+        boost::urls::params_view::iterator it =
+            req.url().params().find("$filter");
+        if (it == req.url().params().end())
+        {
+            messages::invalidQueryFilter(asyncResp->res);
+            return;
+        }
+        queryFilters = std::string((*it).value);
+    }
+    else
+    {
+        evtFormatType = "Event";
+    }
+
+    std::vector<std::string> msgIds;
+    std::vector<std::string> regPrefixes;
+    std::vector<std::string> mrdsArray;
+
+    if (!queryFilters.empty())
+    {
+        // Reading from query params.
+        bool status = readSSEQueryParams(queryFilters, evtFormatType, msgIds,
+                                         regPrefixes, mrdsArray);
+        if (!status)
+        {
+            messages::invalidQueryFilter(asyncResp->res);
+            return;
+        }
+
+        // RegsitryPrefix and messageIds are mutuly exclusive as per redfish
+        // specification.
+        if (!regPrefixes.empty() && !msgIds.empty())
+        {
+            messages::propertyValueConflict(asyncResp->res, "RegistryPrefix",
+                                            "MessageId");
+            return;
+        }
+
+        if (!evtFormatType.empty())
+        {
+            if (std::find(supportedEvtFormatTypes.begin(),
+                          supportedEvtFormatTypes.end(),
+                          evtFormatType) == supportedEvtFormatTypes.end())
+            {
+                messages::propertyValueNotInList(asyncResp->res, evtFormatType,
+                                                 "EventFormatType");
+                return;
+            }
+        }
+        else
+        {
+            // If nothing specified, using default "Event"
+            evtFormatType = "Event";
+        }
+
+        if (!regPrefixes.empty())
+        {
+            for (const std::string& it : regPrefixes)
+            {
+                if (std::find(supportedRegPrefixes.begin(),
+                              supportedRegPrefixes.end(),
+                              it) == supportedRegPrefixes.end())
+                {
+                    messages::propertyValueNotInList(asyncResp->res, it,
+                                                     "RegistryPrefix");
+                    return;
+                }
+            }
+        }
+
+        if (!msgIds.empty())
+        {
+            std::vector<std::string> registryPrefix;
+
+            // If no registry prefixes are mentioned, consider all supported
+            // prefixes to validate message ID
+            if (regPrefixes.empty())
+            {
+                registryPrefix.assign(supportedRegPrefixes.begin(),
+                                      supportedRegPrefixes.end());
+            }
+            else
+            {
+                registryPrefix = regPrefixes;
+            }
+
+            for (const std::string& id : msgIds)
+            {
+                bool validId = false;
+
+                // Check for Message ID in each of the selected Registry
+                for (const std::string& it : registryPrefix)
+                {
+                    const std::span<const redfish::registries::MessageEntry>
+                        registry =
+                            redfish::registries::getRegistryFromPrefix(it);
+
+                    if (std::any_of(
+                            registry.begin(), registry.end(),
+                            [&id](const redfish::registries::MessageEntry&
+                                      messageEntry) {
+                        return !id.compare(messageEntry.first);
+                    }))
+                    {
+                        validId = true;
+                        break;
+                    }
+                }
+
+                if (!validId)
+                {
+                    messages::propertyValueNotInList(asyncResp->res, id,
+                                                     "MessageIds");
+                    return;
+                }
+            }
+        }
+    }
+
     std::shared_ptr<redfish::Subscription> subValue =
         std::make_shared<redfish::Subscription>(conn);
 
@@ -28,7 +160,11 @@ inline void
 
     subValue->protocol = "Redfish";
     subValue->retryPolicy = "TerminateAfterRetries";
-    subValue->eventFormatType = "Event";
+    subValue->eventFormatType = evtFormatType;
+    subValue->owner = req.session->username;
+    subValue->registryMsgIds = msgIds;
+    subValue->registryPrefixes = regPrefixes;
+    subValue->metricReportDefinitions = mrdsArray;
 
     std::string id = manager.addSubscription(subValue, false);
     if (id.empty())
diff --git a/redfish-core/src/error_messages.cpp b/redfish-core/src/error_messages.cpp
index 7bbd8774..ef06b4d1 100644
--- a/redfish-core/src/error_messages.cpp
+++ b/redfish-core/src/error_messages.cpp
@@ -1855,6 +1855,32 @@ nlohmann::json invalidUpload(std::string_view arg1, std::string_view arg2)
     return ret;
 }
 
+/**
+ * @internal
+ * @brief Formats InvalidQueryFilter into JSON
+ *
+ * See header file for more information
+ * @endinternal
+ */
+nlohmann::json invalidQueryFilter()
+{
+    return nlohmann::json{
+        {"@odata.type", "#Message.v1_0_0.Message"},
+        {"MessageId", "Base.1.5.0.InvalidQueryFilter"},
+        {"Message", "The requested url contains the invalid query filter."},
+        {"MessageArgs", nlohmann::json::array()},
+        {"Severity", "Warning"},
+        {"Resolution",
+         "Ensure the correct query filter is specified in requested url "
+         "and resubmit the request."}};
+}
+
+void invalidQueryFilter(crow::Response& res)
+{
+    res.result(boost::beast::http::status::bad_request);
+    addMessageToErrorJson(res.jsonValue, invalidQueryFilter());
+}
+
 } // namespace messages
 
 } // namespace redfish
-- 
2.25.1

