From 09f62332c53cde17ea746844a3e2d9e6af982aff Mon Sep 17 00:00:00 2001
From: Radivoje Jovanovic <radivoje.jovanovic@intel.com>
Date: Thu, 10 Dec 2020 13:42:20 -0800
Subject: [PATCH] recommended fixes by crypto review team

some curves/cyphers are forbiden to be used by
Intel crypto team.
Only enable approved ones.
the patch was created by aleksandr.v.tereschenko@intel.com

Signed-off-by: Radivoje Jovanovic <radivoje.jovanovic@intel.com>
Upstream-Status: Pending
---
 include/ssl_key_handler.hpp | 47 +++++++++++++++++++++----------------
 1 file changed, 27 insertions(+), 20 deletions(-)

diff --git a/include/ssl_key_handler.hpp b/include/ssl_key_handler.hpp
index f8142cf2..6c243f5f 100644
--- a/include/ssl_key_handler.hpp
+++ b/include/ssl_key_handler.hpp
@@ -493,30 +493,37 @@ inline std::shared_ptr<boost::asio::ssl::context>
         SSL_CTX_set_alpn_select_cb(mSslContext->native_handle(),
                                    alpnSelectProtoCallback, nullptr);
     }
-    // Set up EC curves to auto (boost asio doesn't have a method for this)
-    // There is a pull request to add this.  Once this is included in an asio
-    // drop, use the right way
-    // http://stackoverflow.com/questions/18929049/boost-asio-with-ecdsa-certificate-issue
-    if (SSL_CTX_set_ecdh_auto(mSslContext->native_handle(), 1) != 1)
-    {}
-
-    // Mozilla intermediate cipher suites v5.7
-    // Sourced from: https://ssl-config.mozilla.org/guidelines/5.7.json
-    const char* mozillaIntermediate = "ECDHE-ECDSA-AES128-GCM-SHA256:"
-                                      "ECDHE-RSA-AES128-GCM-SHA256:"
-                                      "ECDHE-ECDSA-AES256-GCM-SHA384:"
-                                      "ECDHE-RSA-AES256-GCM-SHA384:"
-                                      "ECDHE-ECDSA-CHACHA20-POLY1305:"
-                                      "ECDHE-RSA-CHACHA20-POLY1305:"
-                                      "DHE-RSA-AES128-GCM-SHA256:"
-                                      "DHE-RSA-AES256-GCM-SHA384:"
-                                      "DHE-RSA-CHACHA20-POLY1305";
+
+    std::string handshakeCurves = "P-384:P-521:X448";
+    if (SSL_CTX_set1_groups_list(mSslContext->native_handle(),
+                                 handshakeCurves.c_str()) != 1)
+    {
+        BMCWEB_LOG_ERROR("Error setting ECDHE group list");
+    }
+
+    std::string tls12Ciphers = "ECDHE-ECDSA-AES256-GCM-SHA384:"
+                               "ECDHE-RSA-AES256-GCM-SHA384";
+    std::string tls13Ciphers = "TLS_AES_256_GCM_SHA384";
 
     if (SSL_CTX_set_cipher_list(mSslContext->native_handle(),
-                                mozillaIntermediate) != 1)
+                                tls12Ciphers.c_str()) != 1)
     {
-        BMCWEB_LOG_ERROR("Error setting cipher list");
+        BMCWEB_LOG_ERROR("Error setting TLS 1.2 cipher list");
     }
+
+    if (SSL_CTX_set_ciphersuites(mSslContext->native_handle(),
+                                 tls13Ciphers.c_str()) != 1)
+    {
+        BMCWEB_LOG_ERROR("Error setting TLS 1.3 cipher list");
+    }
+
+    if ((SSL_CTX_set_options(mSslContext->native_handle(),
+                             SSL_OP_CIPHER_SERVER_PREFERENCE) &
+         SSL_OP_CIPHER_SERVER_PREFERENCE) == 0)
+    {
+        BMCWEB_LOG_ERROR("Error setting TLS server preference option");
+    }
+
     return mSslContext;
 }
 
-- 
2.25.1

