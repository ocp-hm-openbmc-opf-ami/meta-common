From 9e34e5c1d8d7fa0c689724c1f19e0e25c918a4e4 Mon Sep 17 00:00:00 2001
From: Zbigniew Kurzynski <zbigniew.kurzynski@intel.com>
Date: Thu, 20 Oct 2022 12:23:23 +0200
Subject: [PATCH] Set of new MessageEntries added for the NM

This commit adds a new set of MessageEntry that are
specific to the NodeManager.

Tested, messages sent by the NodeManager are properly
displayed in the RF EventLog.
Upstream-Status: Pending
---
 .../registries/nm_message_registry.hpp        | 122 ++++++++++++++++++
 redfish-core/lib/message_registries.hpp       |  18 ++-
 redfish-core/src/registries.cpp               |   6 +
 3 files changed, 144 insertions(+), 2 deletions(-)
 create mode 100644 redfish-core/include/registries/nm_message_registry.hpp

diff --git a/redfish-core/include/registries/nm_message_registry.hpp b/redfish-core/include/registries/nm_message_registry.hpp
new file mode 100644
index 00000000..7e60b05d
--- /dev/null
+++ b/redfish-core/include/registries/nm_message_registry.hpp
@@ -0,0 +1,122 @@
+/*
+// Copyright 2020 Intel Corporation.
+
+// This software and the related documents are Intel copyrighted materials,
+// and your use of them is governed by the express license under which they
+// were provided to you ("License"). Unless the License provides otherwise,
+// you may not use, modify, copy, publish, distribute, disclose or transmit
+// this software or the related documents without Intel's prior written
+// permission.
+
+// This software and the related documents are provided as is, with
+// no express or implied warranties, other than those that are expressly
+// stated in the License.
+*/
+
+#pragma once
+#include <registries.hpp>
+
+namespace redfish::registries::nm
+{
+const Header header = {
+    "Copyright 2021 Intel. All rights reserved.",
+    "#MessageRegistry.v1_4_0.MessageRegistry",
+    "NodeManager.0.1.0",
+    "NodeManager Message Registry",
+    "en",
+    "This registry defines the NodeManager messages for OpenBMC.",
+    "NodeManager",
+    "0.1.0",
+    "Intel",
+};
+constexpr std::array<MessageEntry, 9> registry = {
+    MessageEntry{"NmStopping",
+                 {
+                     "Indicates SPS NodeManager is Enabled.",
+                     "SPS NodeManager enabled, stopping OpenBMC NodeManager.",
+                     "OK",
+                     0,
+                     {},
+                     "None.",
+                 }},
+    MessageEntry{
+        "NmUnableToDisableSpsNm",
+        {
+            "Indicates problems with disabling the SPS NodeManager.",
+            "Unable to disable the SPS NodeManager, stopping OpenBMC NodeManager.",
+            "Critical",
+            0,
+            {},
+            "None.",
+        }},
+    MessageEntry{
+        "NmInitializationMode3",
+        {
+            "Indicates that OpenBMC NodeManager is disabled by configuration settings.",
+            "NodeManager initialization mode is set to 3, stopping OpenBMC NodeManager unconditionally.",
+            "OK",
+            0,
+            {},
+            "None.",
+        }},
+    MessageEntry{
+        "NmLimitExceptionOccurred",
+        {
+            "Indicates that Policy Limit Exception occurred in NodeManager.",
+            "NodeManager reports limit exception for policy: %1",
+            "Warning",
+            1,
+            {"string"},
+            "None.",
+        }},
+    MessageEntry{
+        "NmInitializeSoftShutdown",
+        {
+            "Indicates that the NodeManager is about to initialize platform shutdown.",
+            "NodeManager is about to initiate soft shutdown within next 30s.",
+            "OK",
+            0,
+            {},
+            "None.",
+        }},
+    MessageEntry{"NmPowerShutdownFailed",
+                 {
+                     "Indicates that platform shutdown has failed.",
+                     "NodeManager was unable to shutdown platform.",
+                     "Warning",
+                     0,
+                     {},
+                     "None.",
+                 }},
+    MessageEntry{
+        "NmPolicyAttributeAdjusted",
+        {
+            "Indicates that some policy attributes of the NodeManager were adjusted.",
+            "NodeManager reports some attributes adjustment for policy: %1",
+            "Warning",
+            1,
+            {"string"},
+            "None.",
+        }},
+    MessageEntry{
+        "NmReadingMissing",
+        {
+            "Indicates that some required reading used by the NodeManager is missing.",
+            "NodeManager reports disappearance of required reading type: `%1`",
+            "Warning",
+            1,
+            {"string"},
+            "None.",
+        }},
+    MessageEntry{"NmPolicyAttributeIncorrect",
+                 {
+                     "Indicates that some policy attributes of the NodeManager "
+                     "are incorrect.",
+                     "NodeManager reports some attributes for policy %1 were "
+                     "incorrect. Error description: %2",
+                     "Warning",
+                     2,
+                     {"string", "string"},
+                     "None.",
+                 }}};
+} // namespace redfish::registries::nm
diff --git a/redfish-core/lib/message_registries.hpp b/redfish-core/lib/message_registries.hpp
index 4cc2d2a3..914bb6be 100644
--- a/redfish-core/lib/message_registries.hpp
+++ b/redfish-core/lib/message_registries.hpp
@@ -20,6 +20,7 @@
 #include "registries.hpp"
 #include "registries/base_message_registry.hpp"
 #include "registries/bios_registry.hpp"
+#include "registries/nm_message_registry.hpp"
 #include "registries/openbmc_message_registry.hpp"
 #include "registries/privilege_registry.hpp"
 #include "registries/resource_event_message_registry.hpp"
@@ -49,11 +50,11 @@ inline void handleMessageRegistryFileCollectionGet(
     asyncResp->res.jsonValue["Name"] = "MessageRegistryFile Collection";
     asyncResp->res.jsonValue["Description"] =
         "Collection of MessageRegistryFiles";
-    asyncResp->res.jsonValue["Members@odata.count"] = 5;
+    asyncResp->res.jsonValue["Members@odata.count"] = 6;
 
     nlohmann::json& members = asyncResp->res.jsonValue["Members"];
     for (const char* memberName :
-         std::to_array({"Base", "TaskEvent", "ResourceEvent",
+         std::to_array({"Base", "TaskEvent", "NodeManager", "ResourceEvent",
                         "BiosAttributeRegistry", "OpenBMC"}))
     {
         nlohmann::json::object_t member;
@@ -102,6 +103,11 @@ inline void handleMessageRoutesMessageRegistryFileGet(
         header = &registries::openbmc::header;
         dmtf.clear();
     }
+    else if (registry == "NodeManager")
+    {
+        header = &registries::nm::header;
+        dmtf.clear();
+    }
     else if (registry == "ResourceEvent")
     {
         header = &registries::resource_event::header;
@@ -191,6 +197,14 @@ inline void handleMessageRegistryGet(
             registryEntries.emplace_back(&entry);
         }
     }
+    else if (registry == "NodeManager")
+    {
+        header = &registries::nm::header;
+        for (const registries::MessageEntry& entry : registries::nm::registry)
+        {
+            registryEntries.emplace_back(&entry);
+        }
+    }
     else if (registry == "ResourceEvent")
     {
         header = &registries::resource_event::header;
diff --git a/redfish-core/src/registries.cpp b/redfish-core/src/registries.cpp
index c727d1c7..a5bf0141 100644
--- a/redfish-core/src/registries.cpp
+++ b/redfish-core/src/registries.cpp
@@ -1,6 +1,7 @@
 #include "registries.hpp"
 
 #include "registries/base_message_registry.hpp"
+#include "registries/nm_message_registry.hpp"
 #include "registries/openbmc_message_registry.hpp"
 #include "str_utility.hpp"
 
@@ -48,6 +49,11 @@ const Message* getMessage(std::string_view messageID)
         return getMessageFromRegistry(
             messageKey, std::span<const MessageEntry>(openbmc::registry));
     }
+    if (std::string(nm::header.registryPrefix) == registryName)
+    {
+        return getMessageFromRegistry(
+            messageKey, std::span<const MessageEntry>(nm::registry));
+    }
     return nullptr;
 }
 
-- 
2.25.1

