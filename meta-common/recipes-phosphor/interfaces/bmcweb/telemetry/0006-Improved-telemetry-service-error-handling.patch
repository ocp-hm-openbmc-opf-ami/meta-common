From b43f6500708f682ddddc0c571091cb7e45850960 Mon Sep 17 00:00:00 2001
From: Krzysztof Grobelny <krzysztof.grobelny@intel.com>
Date: Mon, 10 Oct 2022 09:26:44 +0200
Subject: [PATCH] Improved telemetry service error handling

By using data that is send in error massage it is possible to report
detailed information about error to user. Now instead of performing same
validation in bmcweb and backend it can be performed only in backend and
send back detailed error information.

Tested:
- Tested with https://gerrit.openbmc.org/c/openbmc/telemetry/+/57177
- All telemetry features are working as before
- Error codes in bmcweb are more detailed, for example invalid argument
  instead of internal error.

Change-Id: I39b19c1d2de040e65b7da373dd041eed48eddb25
Signed-off-by: Krzysztof Grobelny <krzysztof.grobelny@intel.com>
---
 redfish-core/lib/metric_report_definition.hpp | 152 ++++++++++++++----
 1 file changed, 123 insertions(+), 29 deletions(-)

diff --git a/redfish-core/lib/metric_report_definition.hpp b/redfish-core/lib/metric_report_definition.hpp
index 06b4338e..e3d3ccd4 100644
--- a/redfish-core/lib/metric_report_definition.hpp
+++ b/redfish-core/lib/metric_report_definition.hpp
@@ -74,6 +74,11 @@ struct UserMetricArgs
 {
     bool readUserParameters(crow::Response& res, nlohmann::json& json)
     {
+        if (json.empty())
+        {
+            return true;
+        }
+
         if (!json_util::readJson(json, res, "MetricId", id, "MetricProperties",
                                  metricProperties, "CollectionFunction",
                                  collectionFunction, "CollectionTimeScope",
@@ -333,19 +338,22 @@ inline std::optional<nlohmann::json> getLinkedTriggers(
     return std::make_optional(triggers);
 }
 
-inline bool verifyCommonErrors(crow::Response& res, const std::string& id,
-                               const boost::system::error_code ec)
+inline bool verifyCommonErrors(crow::Response& res,
+                               const boost::system::error_code ec,
+                               const sdbusplus::message_t& msg,
+                               const UserReportArgs args)
 {
-    if (ec.value() == EBADR || ec == boost::system::errc::host_unreachable)
+    if (args.id &&
+        (ec.value() == EBADR || ec == boost::system::errc::host_unreachable))
     {
-        messages::resourceNotFound(res, "MetricReportDefinition", id);
+        messages::resourceNotFound(res, "MetricReportDefinition", *args.id);
         return false;
     }
 
-    if (ec == boost::system::errc::file_exists)
+    if (args.id && ec == boost::system::errc::file_exists)
     {
         messages::resourceAlreadyExists(res, "MetricReportDefinition", "Id",
-                                        id);
+                                        *args.id);
         return false;
     }
 
@@ -355,10 +363,82 @@ inline bool verifyCommonErrors(crow::Response& res, const std::string& id,
         return false;
     }
 
+    if (ec == boost::system::errc::invalid_argument)
+    {
+        const sd_bus_error* dbusError = msg.get_error();
+        if (dbusError != nullptr)
+        {
+            if (args.id && dbusError->message == std::string_view("Id"))
+            {
+                messages::propertyValueIncorrect(res, *args.id, "Id");
+                return false;
+            }
+
+            if (args.name && dbusError->message == std::string_view("Name"))
+            {
+                messages::propertyValueIncorrect(res, *args.name, "Name");
+                return false;
+            }
+
+            if (args.reportingType &&
+                dbusError->message == std::string_view("ReportingType"))
+            {
+                messages::propertyValueIncorrect(res, *args.reportingType,
+                                                 "MetricReportDefinitionType");
+                return false;
+            }
+
+            if (args.appendLimit &&
+                dbusError->message == std::string_view("AppendLimit"))
+            {
+                messages::propertyValueIncorrect(
+                    res, std::to_string(*args.appendLimit), "AppendLimit");
+                return false;
+            }
+
+            if (args.redfishReportActions &&
+                dbusError->message == std::string_view("ReportActions"))
+            {
+                nlohmann::json reportActions = nlohmann::json::array();
+                reportActions = *args.redfishReportActions;
+                messages::propertyValueIncorrect(res, reportActions.dump(),
+                                                 "ReportActions");
+                return false;
+            }
+
+            if (args.recurrenceIntervalStr &&
+                dbusError->message == std::string_view("Interval"))
+            {
+                messages::propertyValueIncorrect(
+                    res, *args.recurrenceIntervalStr, "RecurrenceInterval");
+                return false;
+            }
+
+            if (args.reportUpdates &&
+                dbusError->message == std::string_view("ReportUpdates"))
+            {
+                messages::propertyValueIncorrect(res, *args.reportUpdates,
+                                                 "ReportUpdates");
+                return false;
+            }
+
+            if (args.redfishMetrics && std::string_view(dbusError->message)
+                                           .starts_with("ReadingParameters"))
+            {
+                nlohmann::json readingParameters = nlohmann::json::array();
+                readingParameters = *args.redfishMetrics;
+
+                messages::propertyValueIncorrect(res, readingParameters.dump(),
+                                                 "MetricProperties");
+                return false;
+            }
+        }
+    }
+
     if (ec)
     {
-        BMCWEB_LOG_ERROR << "DBUS response error " << ec;
         messages::internalError(res);
+        BMCWEB_LOG_ERROR << "respHandler DBus error " << ec;
         return false;
     }
 
@@ -775,8 +855,9 @@ class UpdateMetrics
 
         crow::connections::systemBus->async_method_call(
             [aResp = asyncResp,
-             arguments = args](const boost::system::error_code ec) {
-            if (!verifyCommonErrors(aResp->res, *arguments.id, ec))
+             arguments = args](const boost::system::error_code ec,
+                               const sdbusplus::message_t& msg) {
+            if (!verifyCommonErrors(aResp->res, ec, msg, arguments))
             {
                 return;
             }
@@ -890,13 +971,15 @@ class AddReport
         try
         {
             crow::connections::systemBus->async_method_call(
-                [aResp = asyncResp, id = args.id.value_or(""),
-                 uriToDbus = args.metricPropertyToDbusPaths, type = type](
-                    const boost::system::error_code ec, const std::string&) {
+                [aResp = asyncResp, id = args.id.value_or(""), type = type,
+                 arguments = args](const boost::system::error_code ec,
+                                   const sdbusplus::message_t& msg,
+                                   const std::string&) {
                 if (ec == boost::system::errc::argument_list_too_long)
                 {
                     nlohmann::json metricProperties = nlohmann::json::array();
-                    for (const auto& [metricProperty, _] : uriToDbus)
+                    for (const auto& [metricProperty, _] :
+                         arguments.metricPropertyToDbusPaths)
                     {
                         metricProperties.emplace_back(metricProperty);
                     }
@@ -906,7 +989,7 @@ class AddReport
                     return;
                 }
 
-                if (!verifyCommonErrors(aResp->res, id, ec))
+                if (!verifyCommonErrors(aResp->res, ec, msg, arguments))
                 {
                     return;
                 }
@@ -962,8 +1045,9 @@ inline void setReportEnabled(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
     }
 
     crow::connections::systemBus->async_method_call(
-        [aResp, args](const boost::system::error_code ec) {
-        if (!verifyCommonErrors(aResp->res, *args.id, ec))
+        [aResp, args](const boost::system::error_code ec,
+                      const sdbusplus::message_t& msg) {
+        if (!verifyCommonErrors(aResp->res, ec, msg, args))
         {
             return;
         }
@@ -984,8 +1068,9 @@ inline void setReportType(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
     }
 
     crow::connections::systemBus->async_method_call(
-        [aResp, args](const boost::system::error_code ec) {
-        if (!verifyCommonErrors(aResp->res, *args.id, ec))
+        [aResp, args](const boost::system::error_code ec,
+                      const sdbusplus::message_t& msg) {
+        if (!verifyCommonErrors(aResp->res, ec, msg, args))
         {
             return;
         }
@@ -1006,8 +1091,9 @@ inline void setReportUpdates(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
     }
 
     crow::connections::systemBus->async_method_call(
-        [aResp, args](const boost::system::error_code ec) {
-        if (!verifyCommonErrors(aResp->res, *args.id, ec))
+        [aResp, args](const boost::system::error_code ec,
+                      const sdbusplus::message_t& msg) {
+        if (!verifyCommonErrors(aResp->res, ec, msg, args))
         {
             return;
         }
@@ -1028,8 +1114,9 @@ inline void setReportActions(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
     }
 
     crow::connections::systemBus->async_method_call(
-        [aResp, args](const boost::system::error_code ec) {
-        if (!verifyCommonErrors(aResp->res, *args.id, ec))
+        [aResp, args](const boost::system::error_code ec,
+                      const sdbusplus::message_t& msg) {
+        if (!verifyCommonErrors(aResp->res, ec, msg, args))
         {
             return;
         }
@@ -1050,8 +1137,9 @@ inline void setReportInterval(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
     }
 
     crow::connections::systemBus->async_method_call(
-        [aResp, args](const boost::system::error_code ec) {
-        if (!verifyCommonErrors(aResp->res, *args.id, ec))
+        [aResp, args](const boost::system::error_code ec,
+                      const sdbusplus::message_t& msg) {
+        if (!verifyCommonErrors(aResp->res, ec, msg, args))
         {
             return;
         }
@@ -1081,8 +1169,8 @@ inline void
         [asyncResp,
          args](boost::system::error_code ec,
                const dbus::utility::DBusPropertiesMap& properties) mutable {
-        if (!redfish::telemetry::verifyCommonErrors(asyncResp->res, *args.id,
-                                                    ec))
+        if (!redfish::telemetry::verifyCommonErrors(
+                asyncResp->res, ec, sdbusplus::message_t(), args))
         {
             return;
         }
@@ -1247,8 +1335,11 @@ inline void handleReportDelete(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
     const std::string reportPath = getDbusReportPath(id);
 
     crow::connections::systemBus->async_method_call(
-        [aResp, id](const boost::system::error_code ec) {
-        if (!verifyCommonErrors(aResp->res, id, ec))
+        [aResp, id](const boost::system::error_code ec,
+                    const sdbusplus::message_t& msg) {
+        UserReportArgs args;
+        args.id = id;
+        if (!verifyCommonErrors(aResp->res, ec, msg, args))
         {
             return;
         }
@@ -1355,7 +1446,10 @@ inline void requestRoutesMetricReportDefinition(App& app)
             [asyncResp,
              id](const boost::system::error_code ec,
                  const dbus::utility::DBusPropertiesMap& properties) {
-            if (!redfish::telemetry::verifyCommonErrors(asyncResp->res, id, ec))
+            telemetry::UserReportArgs args;
+            args.id = id;
+            if (!redfish::telemetry::verifyCommonErrors(
+                    asyncResp->res, ec, sdbusplus::message_t(), args))
             {
                 return;
             }
-- 
2.34.1
