From 8ee12b4d47bfe799b90d75257923b133e4a1996a Mon Sep 17 00:00:00 2001
From: Karol Niczyj <karol.niczyj@intel.com>
Date: Mon, 20 Jun 2022 14:25:55 +0200
Subject: [PATCH] Added seperate variable for mtls session.

Signed-off-by: Karol Niczyj <karol.niczyj@intel.com>
Signed-off-by: P Dheeraj Srujan Kumar <p.dheeraj.srujan.kumar@intel.com>
Signed-off-by: Jakub Kalinowski <JakubX.Kalinowski@intel.com>
Signed-off-by: Boleslaw Ogonczyk Makowski <boleslawx.ogonczyk-makowski@intel.com>
---
 http/http_connection.hpp | 21 +++++++--------------
 1 file changed, 7 insertions(+), 14 deletions(-)

diff --git a/http/http_connection.hpp b/http/http_connection.hpp
index d1266f3c..6190ad7e 100644
--- a/http/http_connection.hpp
+++ b/http/http_connection.hpp
@@ -264,16 +264,15 @@ class Connection :
                 return true;
             }
             sslUser.resize(lastChar);
-            sessionIsFromTransport = true;
-            userSession = persistent_data::SessionStore::getInstance()
+            mtlsSession = persistent_data::SessionStore::getInstance()
                               .generateUserSession(
                                   sslUser, req->ipAddress, std::nullopt,
                                   persistent_data::PersistenceType::TIMEOUT);
-            if (userSession != nullptr)
+            if (mtlsSession != nullptr)
             {
                 BMCWEB_LOG_DEBUG
                     << this
-                    << " Generating TLS session: " << userSession->uniqueId;
+                    << " Generating TLS session: " << mtlsSession->uniqueId;
             }
             return true;
         });
@@ -410,7 +409,7 @@ class Connection :
                                          boost::asio::ip::tcp::socket>>)
         {
             adaptor.next_layer().close();
-            if (sessionIsFromTransport && userSession != nullptr)
+            if (userSession != nullptr)
             {
                 BMCWEB_LOG_DEBUG
                     << this
@@ -586,11 +585,10 @@ class Connection :
             {
                 BMCWEB_LOG_DEBUG << "Unable to get client IP";
             }
-            sessionIsFromTransport = false;
 #ifndef BMCWEB_INSECURE_DISABLE_AUTHX
             boost::beast::http::verb method = parser->get().method();
             userSession = crow::authentication::authenticate(
-                ip, res, method, parser->get().base(), userSession);
+                ip, res, method, parser->get().base(), mtlsSession);
 
             bool loggedIn = userSession != nullptr;
             if (!loggedIn)
@@ -671,12 +669,7 @@ class Connection :
                                                   // newly created parser
             buffer.consume(buffer.size());
 
-            // If the session was built from the transport, we don't need to
-            // clear it.  All other sessions are generated per request.
-            if (!sessionIsFromTransport)
-            {
-                userSession = nullptr;
-            }
+            userSession = nullptr;
 
             // Destroy the Request via the std::optional
             req.reset();
@@ -750,8 +743,8 @@ class Connection :
     std::optional<crow::Request> req;
     crow::Response res;
 
-    bool sessionIsFromTransport = false;
     std::shared_ptr<persistent_data::UserSession> userSession;
+    std::shared_ptr<persistent_data::UserSession> mtlsSession;
 
     boost::asio::steady_timer timer;
 
-- 
2.25.1

