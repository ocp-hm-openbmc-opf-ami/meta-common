From fc66455a6ff3d359b37601315e99d260efe8b415 Mon Sep 17 00:00:00 2001
From: Jae Hyun Yoo <jae.hyun.yoo@intel.com>
Date: Wed, 27 Jan 2021 15:52:16 -0800
Subject: [PATCH] Fix PECI client creation flow

Use variable delays when detecting CPUs sensors.
This change avoid flood the journal with error messages as CPU powers
on and before peci is fully functioning.
Also slowdown ping after one CPU is detected to be ready state.

Signed-off-by: Zhikui Ren <zhikui.ren@intel.com>
Upstream-Status: Pending
---
 src/IntelCPUSensorMain.cpp | 44 +++++++++++++++++++++++++++-----------
 1 file changed, 32 insertions(+), 12 deletions(-)

diff --git a/src/IntelCPUSensorMain.cpp b/src/IntelCPUSensorMain.cpp
index 1fc75af..579198e 100644
--- a/src/IntelCPUSensorMain.cpp
+++ b/src/IntelCPUSensorMain.cpp
@@ -51,6 +51,9 @@
 // clang-format on
 
 static constexpr bool debug = false;
+static constexpr size_t fastPingSeconds = 1;
+static constexpr size_t slowPingSeconds = 5;
+static constexpr size_t failPingSeconds = 15;
 
 boost::container::flat_map<std::string, std::shared_ptr<IntelCPUSensor>>
     gCpuSensors;
@@ -95,7 +98,7 @@ static constexpr auto hiddenProps{std::to_array<const char*>(
     {IntelCPUSensor::labelTcontrol, "Tthrottle", "Tjmax"})};
 
 void detectCpuAsync(
-    boost::asio::steady_timer& pingTimer,
+    boost::asio::steady_timer& pingTimer, const size_t pingSeconds,
     boost::asio::steady_timer& creationTimer, boost::asio::io_context& io,
     sdbusplus::asio::object_server& objectServer,
     std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
@@ -479,6 +482,7 @@ void detectCpu(boost::asio::steady_timer& pingTimer,
                ManagedObjectType& sensorConfigs)
 {
     size_t rescanDelaySeconds = 0;
+    size_t pingSeconds = fastPingSeconds;
     static bool keepPinging = false;
     int peciFd = -1;
 
@@ -486,6 +490,9 @@ void detectCpu(boost::asio::steady_timer& pingTimer,
     {
         if (config.state == State::READY)
         {
+            // at least one CPU is found, use slowPing since other cpu may not
+            // be present
+            pingSeconds = slowPingSeconds;
             continue;
         }
 
@@ -499,8 +506,9 @@ void detectCpu(boost::asio::steady_timer& pingTimer,
         {
             std::cerr << "unable to open " << peciDevPath << " "
                       << std::strerror(errno) << "\n";
-            detectCpuAsync(pingTimer, creationTimer, io, objectServer,
-                           dbusConnection, cpuConfigs, sensorConfigs);
+            detectCpuAsync(pingTimer, slowPingSeconds, creationTimer, io,
+                           objectServer, dbusConnection, cpuConfigs,
+                           sensorConfigs);
             return;
         }
 
@@ -529,6 +537,8 @@ void detectCpu(boost::asio::steady_timer& pingTimer,
                 }
                 else
                 {
+                    /* ping passed, read dimm temp failed*/
+                    pingSeconds = slowPingSeconds;
                     break;
                 }
             }
@@ -559,11 +569,14 @@ void detectCpu(boost::asio::steady_timer& pingTimer,
                         std::cout << config.name << " is detected\n";
                         if (!exportDevice(config))
                         {
+                            pingSeconds = failPingSeconds;
                             newState = State::OFF;
                         }
                     }
                     else
                     {
+                        /*ping passed, get CPUID failed*/
+                        pingSeconds = slowPingSeconds;
                         newState = State::OFF;
                     }
                 }
@@ -609,27 +622,28 @@ void detectCpu(boost::asio::steady_timer& pingTimer,
                                sensorConfigs) ||
                 keepPinging)
             {
-                detectCpuAsync(pingTimer, creationTimer, io, objectServer,
-                               dbusConnection, cpuConfigs, sensorConfigs);
+                detectCpuAsync(pingTimer, slowPingSeconds, creationTimer, io,
+                               objectServer, dbusConnection, cpuConfigs,
+                               sensorConfigs);
             }
         });
     }
     else if (keepPinging)
     {
-        detectCpuAsync(pingTimer, creationTimer, io, objectServer,
+        detectCpuAsync(pingTimer, pingSeconds, creationTimer, io, objectServer,
                        dbusConnection, cpuConfigs, sensorConfigs);
     }
 }
 
 void detectCpuAsync(
-    boost::asio::steady_timer& pingTimer,
+    boost::asio::steady_timer& pingTimer, const size_t pingSeconds,
     boost::asio::steady_timer& creationTimer, boost::asio::io_context& io,
     sdbusplus::asio::object_server& objectServer,
     std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
     boost::container::flat_set<CPUConfig>& cpuConfigs,
     ManagedObjectType& sensorConfigs)
 {
-    pingTimer.expires_after(std::chrono::seconds(1));
+    pingTimer.expires_after(std::chrono::seconds(pingSeconds));
     pingTimer.async_wait([&](const boost::system::error_code& ec) {
         if (ec == boost::asio::error::operation_aborted)
         {
@@ -639,6 +653,11 @@ void detectCpuAsync(
         detectCpu(pingTimer, creationTimer, io, objectServer, dbusConnection,
                   cpuConfigs, sensorConfigs);
     });
+
+    if (debug)
+    {
+        std::cerr << "detectCpu in " << pingSeconds << " seconds.\n";
+    }
 }
 
 bool getCpuConfig(const std::shared_ptr<sdbusplus::asio::connection>& systemBus,
@@ -768,8 +787,8 @@ int main()
 
         if (getCpuConfig(systemBus, cpuConfigs, sensorConfigs, objectServer))
         {
-            detectCpuAsync(pingTimer, creationTimer, io, objectServer,
-                           systemBus, cpuConfigs, sensorConfigs);
+            detectCpuAsync(pingTimer, fastPingSeconds, creationTimer, io,
+                           objectServer, systemBus, cpuConfigs, sensorConfigs);
         }
     });
 
@@ -797,8 +816,9 @@ int main()
             if (getCpuConfig(systemBus, cpuConfigs, sensorConfigs,
                              objectServer))
             {
-                detectCpuAsync(pingTimer, creationTimer, io, objectServer,
-                               systemBus, cpuConfigs, sensorConfigs);
+                detectCpuAsync(pingTimer, fastPingSeconds, creationTimer, io,
+                               objectServer, systemBus, cpuConfigs,
+                               sensorConfigs);
             }
         });
     };
-- 
2.25.1

