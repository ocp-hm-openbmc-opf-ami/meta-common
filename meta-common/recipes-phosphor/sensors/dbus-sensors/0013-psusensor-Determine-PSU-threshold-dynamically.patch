From 863753fb8de2dfac79d488d8a77f42a954f90d63 Mon Sep 17 00:00:00 2001
From: Vikash Chandola <vikash.chandola@intel.com>
Date: Wed, 27 Jul 2022 10:07:25 +0000
Subject: [PATCH] psusensor: Determine PSU threshold dynamically

PSU output current range(rated, max etc) are dependent on input
voltage. A power supply can deliver higher output on high line input
compared to low line input. Existing implementation uses static
thresholds which causes thresholds to get hit too early for high line
input. This change allows threshold to be set dynamically.

"ThresholdLabel" and "ScaleFactor" are added in SOLUM's entity-manager
configuration file. These parameters provide pmbus register name and
scaling factor to be used for threshold calculation. psusensor fetches
"ThresholdLabel" and multiplies it with "ScaleFactor" to determine
threshold value. "ScaleFactor" allows threshold to be set in ratio to
a value. Example create a threshold that gets triggered at 0.8 times
max permissible current value.

"ThresholdLabel" and "ScaleFactor" can be used for the cases where
threshold need to be determined on the basis on another parameter's
value.

Tested:
Tested by running system on High line and low line input. In both
cases critical and warning thresholds were updated as per
"ThresholdLabel" and "ScaleFactor". If configuration file doesn't
contain "ThresholdLabel" and "ScaleFactor" then "Value" was used.

Signed-off-by: Vikash Chandola <vikash.chandola@intel.com>
Upstream-Status: Pending
---
 src/PSUSensorMain.cpp |  2 +-
 src/Thresholds.cpp    | 65 ++++++++++++++++++++++++++++++++++++++-----
 src/Thresholds.hpp    |  3 +-
 3 files changed, 61 insertions(+), 9 deletions(-)

diff --git a/src/PSUSensorMain.cpp b/src/PSUSensorMain.cpp
index b4550bf..f6e5691 100644
--- a/src/PSUSensorMain.cpp
+++ b/src/PSUSensorMain.cpp
@@ -844,7 +844,7 @@ static void createSensorsCallback(
 
             std::vector<thresholds::Threshold> sensorThresholds;
             if (!parseThresholdsFromConfig(*sensorData, sensorThresholds,
-                                           &labelHead))
+                                           &labelHead, nullptr, &sensorPathStr))
             {
                 std::cerr << "error populating thresholds for "
                           << sensorNameSubStr << "\n";
diff --git a/src/Thresholds.cpp b/src/Thresholds.cpp
index b1d3381..012bb2c 100644
--- a/src/Thresholds.cpp
+++ b/src/Thresholds.cpp
@@ -45,11 +45,48 @@ Direction findThresholdDirection(const std::string& direct)
     }
     return Direction::ERROR;
 }
+static const std::unordered_map<std::string, std::string> labelToHwmonSuffix = {
+    {"iout_oc_warn_limit", "max"},
+};
+
+static std::optional<double>
+    parseThresholdFromLabel(const std::string* sensorPathStr,
+                            const SensorBaseConfigMap& sensorData)
+{
+    if (sensorPathStr == nullptr)
+    {
+        return std::nullopt;
+    }
+    auto thresholdLabelFind = sensorData.find("ThresholdLabel");
+    auto scaleFactorFind = sensorData.find("ScaleFactor");
+    if (thresholdLabelFind == sensorData.end() ||
+        scaleFactorFind == sensorData.end())
+    {
+        return std::nullopt;
+    }
+    auto hwmonFileSuffix = labelToHwmonSuffix.find(
+        std::visit(VariantToStringVisitor(), thresholdLabelFind->second));
+    if (hwmonFileSuffix == labelToHwmonSuffix.end())
+    {
+        return std::nullopt;
+    }
+    auto fileParts = splitFileName(*sensorPathStr);
+    if (!fileParts.has_value())
+    {
+        return std::nullopt;
+    }
+    auto& [type, nr, item] = fileParts.value();
+    auto attrPath = boost::replace_all_copy(*sensorPathStr, item,
+                                            hwmonFileSuffix->second);
+    return readFile(attrPath, (1.0 / std::visit(VariantToDoubleVisitor(),
+                                                scaleFactorFind->second)));
+}
 
 bool parseThresholdsFromConfig(
     const SensorData& sensorData,
     std::vector<thresholds::Threshold>& thresholdVector,
-    const std::string* matchLabel, const int* sensorIndex)
+    const std::string* matchLabel, const int* sensorIndex,
+    const std::string* sensorPathStr)
 {
     for (const auto& [intf, cfg] : sensorData)
     {
@@ -97,11 +134,9 @@ bool parseThresholdsFromConfig(
                                     hysteresisFind->second);
         }
 
-        auto directionFind = cfg.find("Direction");
         auto severityFind = cfg.find("Severity");
-        auto valueFind = cfg.find("Value");
-        if (valueFind == cfg.end() || severityFind == cfg.end() ||
-            directionFind == cfg.end())
+        auto directionFind = cfg.find("Direction");
+        if (severityFind == cfg.end() || directionFind == cfg.end())
         {
             std::cerr << "Malformed threshold on configuration interface "
                       << intf << "\n";
@@ -120,8 +155,24 @@ bool parseThresholdsFromConfig(
         {
             continue;
         }
-        double val = std::visit(VariantToDoubleVisitor(), valueFind->second);
-
+        double val = 0;
+        auto valueFind = cfg.find("Value");
+        auto labelValueOption = parseThresholdFromLabel(sensorPathStr, cfg);
+        if (labelValueOption.has_value())
+        {
+            val = labelValueOption.value();
+        }
+        else if (valueFind != cfg.end())
+        {
+            val = std::visit(VariantToDoubleVisitor(), valueFind->second);
+        }
+        else
+        {
+            std::cerr << "Failed to parse threshold value configuration for "
+                         "interface "
+                      << intf << "\n";
+            return false;
+        }
         thresholdVector.emplace_back(level, direction, val, hysteresis);
     }
     return true;
diff --git a/src/Thresholds.hpp b/src/Thresholds.hpp
index c6be154..18a67f7 100644
--- a/src/Thresholds.hpp
+++ b/src/Thresholds.hpp
@@ -117,7 +117,8 @@ struct ThresholdTimer
 bool parseThresholdsFromConfig(
     const SensorData& sensorData,
     std::vector<thresholds::Threshold>& thresholdVector,
-    const std::string* matchLabel = nullptr, const int* sensorIndex = nullptr);
+    const std::string* matchLabel = nullptr, const int* sensorIndex = nullptr,
+    const std::string* sensorPathStr = nullptr);
 
 bool parseThresholdsFromAttr(
     std::vector<thresholds::Threshold>& thresholdVector,
-- 
2.25.1

