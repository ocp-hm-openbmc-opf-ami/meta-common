From 6c1e8546cbb80405d0bba74d82f703200fb5a694 Mon Sep 17 00:00:00 2001
From: Zhikui Ren <zhikui.ren@intel.com>
Date: Tue, 11 May 2021 11:14:55 -0700
Subject: [PATCH] CPUSensor: create RequiredTempSensor if defined

When BMC fails to talk to CPU through PECI, no
CPU sensors are created. Fan speed control only boost
fan when input sensor is not available. It does not
have the knowledge of which sensors are expected to
be present and can't treat "missing" sensor as failed one.
The failure on PECI goes unnoticed and we can have a thermal
run away.

Query sensor config for RequiredTempSensor for any present
CPUs. Create a CPU sensor that is not available.
This sensor will be replaced by a normal CPU sensor when
peci detect the CPU and associated hwmon file is discovered.

This is an initial patch that target to address the particular
failure case. More work will follow to support a more generic
"Required" sensor config.

Signed-off-by: Zhikui Ren <zhikui.ren@intel.com>
---
 include/IntelCPUSensor.hpp |  9 +++++
 src/IntelCPUSensor.cpp     | 68 ++++++++++++++++++++++++++++++++++++++
 src/IntelCPUSensorMain.cpp | 54 +++++++++++++++++++++++++-----
 3 files changed, 123 insertions(+), 8 deletions(-)

diff --git a/include/IntelCPUSensor.hpp b/include/IntelCPUSensor.hpp
index 844c861..d6ab241 100644
--- a/include/IntelCPUSensor.hpp
+++ b/include/IntelCPUSensor.hpp
@@ -28,6 +28,15 @@ class IntelCPUSensor :
                    std::vector<thresholds::Threshold>&& thresholds,
                    const std::string& configuration, int cpuId, bool show,
                    double dtsOffset);
+
+    // Create a CPUSensor without a path to sensor value
+    IntelCPUSensor(const std::string& objectType,
+                   sdbusplus::asio::object_server& objectServer,
+                   std::shared_ptr<sdbusplus::asio::connection>& conn,
+                   boost::asio::io_service& io, const std::string& sensorName,
+                   std::vector<thresholds::Threshold>&& thresholdsIn,
+                   const std::string& sensorConfiguration);
+
     ~IntelCPUSensor() override;
     static constexpr unsigned int sensorScaleFactor = 1000;
     static constexpr unsigned int sensorPollMs = 1000;
diff --git a/src/IntelCPUSensor.cpp b/src/IntelCPUSensor.cpp
index c4ac9e3..3203773 100644
--- a/src/IntelCPUSensor.cpp
+++ b/src/IntelCPUSensor.cpp
@@ -93,6 +93,74 @@ IntelCPUSensor::IntelCPUSensor(
     setupPowerMatch(conn);
 }
 
+// Create a  dummy "not available" IntelCPUSensor
+// This is used to indicate a missing required sensor for
+// other services like fan control
+IntelCPUSensor::IntelCPUSensor(
+    const std::string& objectType, sdbusplus::asio::object_server& objectServer,
+    std::shared_ptr<sdbusplus::asio::connection>& conn,
+    boost::asio::io_service& io, const std::string& sensorName,
+    std::vector<thresholds::Threshold>&& thresholdsIn,
+    const std::string& sensorConfiguration) :
+    Sensor(escapeName(sensorName), std::move(thresholdsIn), sensorConfiguration,
+           objectType, false, false, 0, 0, conn, PowerState::on),
+    objServer(objectServer), inputDev(io), waitTimer(io),
+    privTcontrol(std::numeric_limits<double>::quiet_NaN()), dtsOffset(0),
+    show(true), pollTime(IntelCPUSensor::sensorPollMs), minMaxReadCounter(0)
+{
+    // assume it is a temperature sensor for now
+    // support for other type can be added later
+    std::string interfacePath =
+        "/xyz/openbmc_project/sensors/temperature/" + name;
+    const char* units = sensor_paths::unitDegreesC;
+    minValue = -128;
+    maxValue = 127;
+
+    sensorInterface = objectServer.add_interface(
+        interfacePath, "xyz.openbmc_project.Sensor.Value");
+
+    sensorInterface->register_property("Unit", units);
+    sensorInterface->register_property("MaxValue", maxValue);
+    sensorInterface->register_property("MinValue", minValue);
+    sensorInterface->register_property(
+        "Value", value, [&](const double& newValue, double& oldValue) {
+            return setSensorValue(newValue, oldValue);
+        });
+    if (!sensorInterface->initialize())
+    {
+        std::cerr << "error initializing value interface\n";
+    }
+
+    if (!availableInterface)
+    {
+        availableInterface = std::make_shared<sdbusplus::asio::dbus_interface>(
+            conn, sensorInterface->get_object_path(), availableInterfaceName);
+        availableInterface->register_property(
+            "Available", false, [this](const bool propIn, bool& old) {
+                if (propIn == old)
+                {
+                    return 1;
+                }
+                old = propIn;
+                if (!propIn)
+                {
+                    updateValue(std::numeric_limits<double>::quiet_NaN());
+                }
+                return 1;
+            });
+        availableInterface->initialize();
+    }
+    if (!operationalInterface)
+    {
+        operationalInterface =
+            std::make_shared<sdbusplus::asio::dbus_interface>(
+                conn, sensorInterface->get_object_path(),
+                operationalInterfaceName);
+        operationalInterface->register_property("Functional", true);
+        operationalInterface->initialize();
+    }
+}
+
 IntelCPUSensor::~IntelCPUSensor()
 {
     // close the input dev to cancel async operations
diff --git a/src/IntelCPUSensorMain.cpp b/src/IntelCPUSensorMain.cpp
index 9e0a01a..e70470f 100644
--- a/src/IntelCPUSensorMain.cpp
+++ b/src/IntelCPUSensorMain.cpp
@@ -334,10 +334,9 @@ bool createSensors(boost::asio::io_service& io,
             {
                 if (debug)
                 {
-                    std::cout << "Skipped: " << inputPath << ": " << sensorName
-                              << " is already created\n";
+                    std::cout << "Will be replaced: " << inputPath << ": "
+                              << sensorName << " is already created\n";
                 }
-                continue;
             }
 
             // check hidden properties
@@ -643,9 +642,9 @@ void detectCpuAsync(
     });
 }
 
-bool getCpuConfig(const std::shared_ptr<sdbusplus::asio::connection>& systemBus,
+bool getCpuConfig(std::shared_ptr<sdbusplus::asio::connection>& systemBus,
                   boost::container::flat_set<CPUConfig>& cpuConfigs,
-                  ManagedObjectType& sensorConfigs,
+                  ManagedObjectType& sensorConfigs, boost::asio::io_service& io,
                   sdbusplus::asio::object_server& objectServer)
 {
     bool useCache = false;
@@ -705,6 +704,45 @@ bool getCpuConfig(const std::shared_ptr<sdbusplus::asio::connection>& systemBus,
                     iface->register_property("Present", *present);
                     iface->initialize();
                     inventoryIfaces[name] = std::move(iface);
+                    if (*present)
+                    {
+                        // create required CPU sensors here in unavailable state
+                        auto findRequiredTempSensor =
+                            cfg.find("RequiredTempSensor");
+                        auto findCpuId = cfg.find("CpuID");
+                        if (findRequiredTempSensor != cfg.end() &&
+                            findCpuId != cfg.end())
+                        {
+                            std::string label =
+                                std::visit(VariantToStringVisitor(),
+                                           findRequiredTempSensor->second);
+                            // for temp sensor hwmon sysfs use input
+                            std::string item{"input"};
+                            int cpuId =
+                                std::visit(VariantToUnsignedIntVisitor(),
+                                           findCpuId->second);
+                            std::string requiredSensorName =
+                                createSensorName(label, item, cpuId);
+
+                            auto& sensorPtr = gCpuSensors[requiredSensorName];
+                            if (sensorPtr == nullptr)
+                            {
+                                // created a dummy sensor for required sensor,
+                                // will be replaced with a real one if it is
+                                // detected
+                                std::string objectType{};
+                                std::vector<thresholds::Threshold>
+                                    emptyThreshold{};
+                                std::string emptyConfig{};
+                                sensorPtr = std::make_unique<IntelCPUSensor>(
+                                    objectType, objectServer, systemBus, io,
+                                    requiredSensorName,
+                                    std::move(emptyThreshold), emptyConfig);
+                                std::cout << "created required CPU sensor "
+                                          << requiredSensorName << "\n";
+                            }
+                        }
+                    }
                 }
 
                 auto findBus = cfg.find("Bus");
@@ -733,7 +771,6 @@ bool getCpuConfig(const std::shared_ptr<sdbusplus::asio::connection>& systemBus,
                     std::cout << "name: " << name << "\n";
                     std::cout << "type: " << type << "\n";
                 }
-
                 cpuConfigs.emplace(bus, addr, name, State::OFF);
             }
         }
@@ -768,7 +805,8 @@ int main()
             return; // we're being canceled
         }
 
-        if (getCpuConfig(systemBus, cpuConfigs, sensorConfigs, objectServer))
+        if (getCpuConfig(systemBus, cpuConfigs, sensorConfigs, io,
+                         objectServer))
         {
             detectCpuAsync(pingTimer, creationTimer, io, objectServer,
                            systemBus, cpuConfigs, sensorConfigs);
@@ -796,7 +834,7 @@ int main()
                 return; // we're being canceled
             }
 
-            if (getCpuConfig(systemBus, cpuConfigs, sensorConfigs,
+            if (getCpuConfig(systemBus, cpuConfigs, sensorConfigs, io,
                              objectServer))
             {
                 detectCpuAsync(pingTimer, creationTimer, io, objectServer,
-- 
2.25.1

