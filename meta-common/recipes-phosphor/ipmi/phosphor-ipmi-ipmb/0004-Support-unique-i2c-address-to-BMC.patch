From f2f55081cf1014d142264d95f18917df6ac1f34a Mon Sep 17 00:00:00 2001
From: Anjaliintel-21 <anjali.ray@intel.com>
Date: Mon, 25 Sep 2023 03:07:28 +0000
Subject: [PATCH] Support unique i2c address to BMC

Added support to handle unique i2c address in BMC in modular
system as BMC was having same i2c address.
i2cdetect was showing only one port used in all the BMC.
We alloted different i2c addresses to all the BMC's.
We have additional changes in modular-system to support the same:
intel-collab/firmware.bmc.openbmc.applications.modular-system#12

Tested:
Before the changes:
i2cdetect -y 13
0 1 2 3 4 5 6 7 8 9 a b c d e f
00: -- -- -- -- -- -- -- --
10: UU -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
70: -- -- -- -- -- -- -- --

After the changes:
i2cdetect -y 13
0 1 2 3 4 5 6 7 8 9 a b c d e f
00: -- -- -- -- -- -- -- --
10: UU 11 12 13 -- -- -- -- -- -- -- -- -- -- -- --
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
70: -- -- -- -- -- -- -- --

Signed-off-by: Gokul Sanker V G gokul.sanker.v.g@intel.com
Signed-off-by: Anjaliintel-21 anjali.ray@intel.com
---
 ipmbbridged.cpp | 27 ++++++++++++++++++++++-----
 1 file changed, 22 insertions(+), 5 deletions(-)

diff --git a/ipmbbridged.cpp b/ipmbbridged.cpp
index 45a0379..e84ddb3 100644
--- a/ipmbbridged.cpp
+++ b/ipmbbridged.cpp
@@ -1100,9 +1100,10 @@ auto slotIpmbHandleRequest =
         return channel->slotRequestAdd(yield, request, slotNumber);
     };
 
-auto ipmbHandleRequest = [](boost::asio::yield_context yield,
-                            uint8_t reqChannel, uint8_t netfn, uint8_t lun,
-                            uint8_t cmd, std::vector<uint8_t> dataReceived) {
+auto ipmbHandleRequest(boost::asio::yield_context yield,
+                       uint8_t reqChannel, uint8_t netfn, uint8_t lun,
+                       uint8_t cmd, std::vector<uint8_t> dataReceived,
+                       std::optional<uint8_t> targetAddr = std::nullopt) {
     IpmbChannel* channel = getChannel(reqChannel);
 
     if (channel == nullptr)
@@ -1123,7 +1124,8 @@ auto ipmbHandleRequest = [](boost::asio::yield_context yield,
     }
 
     uint8_t bmcSlaveAddress = channel->getBmcSlaveAddress();
-    uint8_t rqSlaveAddress = channel->getRqSlaveAddress();
+    uint8_t rqSlaveAddress = \
+                        targetAddr ? *targetAddr : channel->getRqSlaveAddress();
 
     // construct the request to add it to outstanding request list
     std::shared_ptr<IpmbRequest> request = std::make_shared<IpmbRequest>(
@@ -1244,7 +1246,22 @@ int main()
     std::shared_ptr<sdbusplus::asio::dbus_interface> ipmbIface =
         server.add_interface(ipmbObj, ipmbDbusIntf);
 
-    ipmbIface->register_method("sendRequest", std::move(ipmbHandleRequest));
+    ipmbIface->register_method("sendRequest", \
+        [](boost::asio::yield_context yield,
+           uint8_t reqChannel, uint8_t netfn, uint8_t lun,
+           uint8_t cmd, std::vector<uint8_t> dataReceived) {
+               return ipmbHandleRequest(yield, reqChannel, netfn, lun, cmd, \
+					dataReceived);
+    });
+
+    ipmbIface->register_method("sendRequestTarget", \
+        [](boost::asio::yield_context yield,
+           uint8_t reqChannel, uint8_t targetAddr, uint8_t netfn, uint8_t lun,
+           uint8_t cmd, std::vector<uint8_t> dataReceived) {
+               return ipmbHandleRequest(yield, reqChannel, netfn, lun, cmd, \
+					dataReceived, targetAddr);
+    });
+
     ipmbIface->register_method("SlotIpmbRequest",
                                std::move(slotIpmbHandleRequest));
     ipmbIface->initialize();
-- 
2.17.1
