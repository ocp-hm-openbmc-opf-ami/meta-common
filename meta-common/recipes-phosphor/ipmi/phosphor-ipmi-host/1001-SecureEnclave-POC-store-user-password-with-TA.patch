From 236772ae648194c33ddee76687aacda7d6f3b7ef Mon Sep 17 00:00:00 2001
From: Zhikui Ren <zhikui.ren@intel.com>
Date: Tue, 16 Mar 2021 14:47:43 -0700
Subject: [PATCH] POC - store user password with TA ipmi_pass

Initial patch to store user password in secure storage.

As part of POC for secure enclave feature, OPTEE has been
ported to ast2600 and integrated into BMC.
User passwords can be saved into secure storage, which can
only be read by trusted application(TA) executing in secure
world (TEE). TA ipmi pass provides api to add and verify password
for given user and keep user passwords inside the TEE.

New files passwd_mgr_secure.hpp/cpp detect whether optee-os is loaded,
install user passwords into TEE secure storage, verify user password in
secure storage through ipmi pass TA.

usercommands handlers are updated to call the new functions.
When secure enclave feature is enabled and loaded, user passwords are
stored in both secure storage and the normal location.
This allows verification of new feature while keeping existing functionality.

Tested:
    Build with SecureEnclave feature enabled and boot with optee-os first.
    Excuted the following commands successfully.
        ipmitool -v  -I lanplus -U root -P 0penBmc -H $IP -C 17 user set name 2 debuguser
        ipmitool -v  -I lanplus -U root -P 0penBmc -H $IP -C 17 user set password 2 0penBmc1
        ipmitool -v  -I lanplus -U root -P 0penBmc -H $IP -C 17 user enable 2
        ipmitool -v  -I lanplus -U root -P 0penBmc -H $IP -C 17 channel setaccess 3 2 ipmi=on privilege=4
        ipmitool -v  -I lanplus -U root -P 0penBmc -H $IP -C 17 user list 3
        ipmitool -v  -I lanplus -U debuguser -P 0penBmc1 -H $IP -C 17 user list 3
        ipmitool -v  -I lanplus -U root -P 0penBmc -H $IP -C 17 user test 2 20 0penBmc1 (success)
        ipmitool -v  -I lanplus -U root -P 0penBmc -H $IP -C 17 user test 2 20 0penBmc2 (fail)

Signed-off-by: Zhikui Ren <zhikui.ren@intel.com>
Upstream-Status: Pending
---
 user_channel/meson.build           |   1 +
 user_channel/passwd_mgr.cpp        |   2 +
 user_channel/passwd_mgr_secure.cpp | 142 +++++++++++++++++++++++++++++
 user_channel/passwd_mgr_secure.hpp |  45 +++++++++
 user_channel/user_mgmt.cpp         |  15 ++-
 user_channel/usercommands.cpp      |  10 ++
 6 files changed, 214 insertions(+), 1 deletion(-)
 create mode 100644 user_channel/passwd_mgr_secure.cpp
 create mode 100644 user_channel/passwd_mgr_secure.hpp

diff --git a/user_channel/meson.build b/user_channel/meson.build
index 1808b2b..5b9d7eb 100644
--- a/user_channel/meson.build
+++ b/user_channel/meson.build
@@ -55,6 +55,7 @@ if not get_option('libuserlayer').disabled()
     'user_layer.cpp',
     'user_mgmt.cpp',
     'passwd_mgr.cpp',
+    'passwd_mgr_secure.cpp',
   ]
 
   userlayer_lib = library(
diff --git a/user_channel/passwd_mgr.cpp b/user_channel/passwd_mgr.cpp
index 9b232b5..07af321 100644
--- a/user_channel/passwd_mgr.cpp
+++ b/user_channel/passwd_mgr.cpp
@@ -15,6 +15,7 @@
 */
 
 #include "passwd_mgr.hpp"
+#include "passwd_mgr_secure.hpp"
 
 #include "file.hpp"
 #include "shadowlock.hpp"
@@ -62,6 +63,7 @@ using namespace phosphor::logging;
 
 PasswdMgr::PasswdMgr()
 {
+    secPasswdMgrInit();
     restrictFilesPermission();
     initPasswordMap();
 }
diff --git a/user_channel/passwd_mgr_secure.cpp b/user_channel/passwd_mgr_secure.cpp
new file mode 100644
index 0000000..2450b34
--- /dev/null
+++ b/user_channel/passwd_mgr_secure.cpp
@@ -0,0 +1,140 @@
+#include <passwd_mgr_secure.hpp>
+
+#include <filesystem>
+#include <iostream>
+#include <phosphor-logging/log.hpp>
+
+#ifdef HAS_OPTEE
+TEEC_Result prepare_tee_session(struct uta_ctx* ctx)
+{
+    TEEC_UUID uuid = TA_IPMI_PASS_UUID;
+    uint32_t origin;
+    TEEC_Result res;
+
+    /* Initialize a context connecting us to the TEE */
+    res = TEEC_InitializeContext(NULL, &ctx->ctx);
+    if (res != TEEC_SUCCESS)
+    {
+        std::cerr << "TEEC_InitializeContext failed with code " << res;
+        return res;
+    }
+    /* Open a session with the TA */
+    res = TEEC_OpenSession(&ctx->ctx, &ctx->sess, &uuid, TEEC_LOGIN_PUBLIC,
+                           NULL, NULL, &origin);
+    if (res != TEEC_SUCCESS)
+    {
+        std::cerr << "TEEC_Opensession failed with code " << res << "origin "
+                  << origin;
+    }
+    return res;
+}
+
+void terminate_tee_session(struct uta_ctx* ctx)
+{
+    TEEC_CloseSession(&ctx->sess);
+    TEEC_FinalizeContext(&ctx->ctx);
+}
+#endif
+
+namespace ipmi
+{
+using namespace phosphor::logging;
+static bool teeLoaded = false;
+
+bool secUpdatePasswd(const char* username, const size_t usernameSz,
+                    const char* password, const size_t passwordSz)
+{
+#ifdef HAS_OPTEE
+    if (!teeLoaded)
+    {
+        return true;
+    }
+
+    struct uta_ctx ctx;
+    TEEC_Result res = prepare_tee_session(&ctx);
+    if ( res != TEEC_SUCCESS)
+    {
+        return false;
+    }
+
+    /*
+     * Create object, read it, delete it.
+     */
+    TEEC_Operation op{};
+    uint32_t origin;
+
+    op.paramTypes = TEEC_PARAM_TYPES(
+        TEEC_MEMREF_TEMP_INPUT, TEEC_MEMREF_TEMP_INPUT, TEEC_NONE, TEEC_NONE);
+
+    op.params[0].tmpref.buffer = const_cast<char*>(username);
+    op.params[0].tmpref.size = usernameSz;
+
+    op.params[1].tmpref.buffer = const_cast<char*>(password);
+    op.params[1].tmpref.size = passwordSz;
+
+    res = TEEC_InvokeCommand(&ctx.sess, TA_INSTALL_KEY, &op, &origin);
+
+    terminate_tee_session(&ctx);
+
+    return res==TEEC_SUCCESS;
+#else
+    return true;
+#endif
+}
+
+bool secTestPasswd(const char* username, const size_t usernameSz,
+                  const char* password, const size_t passwordSz)
+{
+#ifdef HAS_OPTEE
+    if (!teeLoaded)
+    {
+        return true;
+    }
+
+    struct uta_ctx ctx;
+    TEEC_Result res = prepare_tee_session(&ctx);
+    if (res != TEEC_SUCCESS)
+    {
+        return false;
+    }
+
+    /*
+     * Create object, read it, delete it.
+     */
+    TEEC_Operation op{};
+    uint32_t origin;
+
+    op.paramTypes = TEEC_PARAM_TYPES(
+        TEEC_MEMREF_TEMP_INPUT, TEEC_MEMREF_TEMP_INPUT, TEEC_NONE, TEEC_NONE);
+
+    op.params[0].tmpref.buffer = const_cast<char*>(username);
+    op.params[0].tmpref.size = usernameSz;
+
+    op.params[1].tmpref.buffer = const_cast<char*>(password);
+    op.params[1].tmpref.size = passwordSz;
+
+    res = TEEC_InvokeCommand(&ctx.sess, TA_VERIFY_KEY, &op, &origin);
+
+    terminate_tee_session(&ctx);
+
+    return res == TEEC_SUCCESS;
+#else
+    return true;
+#endif
+}
+
+void secPasswdMgrInit()
+{
+    if (std::filesystem::exists("/dev/teepriv0"))
+    {
+        teeLoaded = true;
+        log<level::INFO>("OPTEE is loaded");
+    }
+    else
+    {
+        teeLoaded = false;
+    }
+
+}
+
+} // namespace ipmi
\ No newline at end of file
diff --git a/user_channel/passwd_mgr_secure.hpp b/user_channel/passwd_mgr_secure.hpp
new file mode 100644
index 0000000..2a63119
--- /dev/null
+++ b/user_channel/passwd_mgr_secure.hpp
@@ -0,0 +1,45 @@
+/*
+// Copyright (c) 2018 Intel Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+#pragma once
+
+#include <cstdint>
+#include <cstddef>
+#ifdef HAS_OPTEE
+/* OP-TEE TEE client API (built by optee_client) */
+#include <tee_client_api.h>
+
+/* TA API: UUID and command IDs */
+#include <ipmi_pass_ta.h>
+/* TEE resources */
+struct uta_ctx
+{
+    TEEC_Context ctx;
+    TEEC_Session sess;
+};
+TEEC_Result prepare_tee_session(struct uta_ctx* ctx);
+void terminate_tee_session(struct uta_ctx* ctx);
+#endif
+
+namespace ipmi
+{
+void secPasswdMgrInit();
+
+bool secUpdatePasswd(const char* username, const size_t usernameSz,
+                    const char* password, const size_t passwordSz);
+
+bool secTestPasswd(const char* username, const size_t usernameSz,
+                  const char* password, const size_t passwordSz);
+} // namespace ipmi
diff --git a/user_channel/user_mgmt.cpp b/user_channel/user_mgmt.cpp
index c205fea..aa649bb 100644
--- a/user_channel/user_mgmt.cpp
+++ b/user_channel/user_mgmt.cpp
@@ -14,6 +14,7 @@
 // limitations under the License.
 */
 #include "user_mgmt.hpp"
+#include "passwd_mgr_secure.hpp"
 
 #include "apphandler.hpp"
 #include "channel_layer.hpp"
@@ -753,7 +754,11 @@ bool pamUserCheckAuthenticate(std::string_view username,
 Cc UserAccess::setSpecialUserPassword(const std::string& userName,
                                       const SecureString& userPassword)
 {
-    if (pamUpdatePasswd(userName.c_str(), userPassword.c_str()) != PAM_SUCCESS)
+    bool secSuccess = secUpdatePasswd(userName.c_str(), userName.size(),
+                    userPassword.c_str(), userPassword.size());
+
+    if (pamUpdatePasswd(userName.c_str(), userPassword.c_str()) != PAM_SUCCESS
+        || !secSuccess)
     {
         log<level::DEBUG>("Failed to update password");
         return ccUnspecifiedError;
@@ -774,12 +779,20 @@ Cc UserAccess::setUserPassword(const uint8_t userId, const char* userPassword)
     ipmi::SecureString passwd;
     passwd.assign(reinterpret_cast<const char*>(userPassword), 0,
                   maxIpmi20PasswordSize);
+
+    bool secSuccess = secUpdatePasswd(userName.c_str(), userName.size(),
+                    passwd.c_str(), passwd.size());
+
     int retval = pamUpdatePasswd(userName.c_str(), passwd.c_str());
 
     switch (retval)
     {
         case PAM_SUCCESS:
         {
+            if( !secSuccess )
+            {
+                return ccUnspecifiedError;
+            }
             return ccSuccess;
         }
         case PAM_AUTHTOK_ERR:
diff --git a/user_channel/usercommands.cpp b/user_channel/usercommands.cpp
index 901e4a6..3845909 100644
--- a/user_channel/usercommands.cpp
+++ b/user_channel/usercommands.cpp
@@ -15,6 +15,7 @@
 */
 
 #include "usercommands.hpp"
+#include "passwd_mgr_secure.hpp"
 
 #include "apphandler.hpp"
 #include "channel_layer.hpp"
@@ -356,6 +357,15 @@ ipmi::RspType<> // user name
             static constexpr ipmi::Cc ipmiCCPasswdFailMismatch = 0x80;
             return ipmi::response(ipmiCCPasswdFailMismatch);
         }
+
+        if (!secTestPasswd(userName.c_str(), userName.size(),
+                  testPassword.c_str(), testPassword.size()))
+        {
+            log<level::DEBUG>("Test password failed",
+                              entry("USER-ID=%d", userId));
+            static constexpr ipmi::Cc ipmiCCPasswdFailMismatch = 0x80;
+            return ipmi::response(ipmiCCPasswdFailMismatch);
+        }
         return ipmi::responseSuccess();
     }
     return ipmi::responseInvalidFieldRequest();
-- 
2.25.1

