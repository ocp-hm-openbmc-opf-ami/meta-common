From d7ab4dc33a9bfd8def027e92ae777415ea8bf9de Mon Sep 17 00:00:00 2001
From: Eddyhan <eddyhan@ami.com>
Date: Fri, 7 Oct 2022 10:43:06 +0800
Subject: [PATCH 1/2] CMakeLists.txt


diff --git a/CMakeLists.txt b/CMakeLists.txt
old mode 100644
new mode 100755
index 16003f0c..9dc048e1
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -77,6 +77,8 @@ if(CMAKE_SYSTEM_NAME MATCHES "Linux")
         MESSAGE("TOOLCHAIN = ARC_GCC")
     elseif(TOOLCHAIN STREQUAL "NIOS2_GCC")
         MESSAGE("TOOLCHAIN = NIOS2_GCC")
+    elseif(TOOLCHAIN STREQUAL "OPENBMC_GCC")
+        MESSAGE("TOOLCHAIN = OPENBMC_GCC")
     else()
         MESSAGE(FATAL_ERROR "Unkown TOOLCHAIN")
     endif()
@@ -416,7 +418,36 @@ if(CMAKE_SYSTEM_NAME MATCHES "Linux")
         SET(CMAKE_EXE_LINKER_FLAGS "")
 
         SET(CMAKE_C_LINK_EXECUTABLE "")
+    elseif(TOOLCHAIN STREQUAL "OPENBMC_GCC")
+        SET(CMAKE_C_COMPILER arm-openbmc-linux-gnueabi-gcc)
+        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -g  -fno-strict-aliasing -Wall -Werror -Wno-array-bounds -ffunction-sections -fdata-sections -fno-common -Wno-address -fPIC -fno-asynchronous-unwind-tables -Wno-maybe-uninitialized -Wno-uninitialized  -Wno-builtin-declaration-mismatch -Wno-nonnull-compare")
+       if(NOT CMAKE_BUILD_TYPE STREQUAL "Release")
+            ADD_COMPILE_OPTIONS(-g)
+            SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-error=cpp")
+        endif()
+        if(GCOV STREQUAL "ON")
+        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --coverage -fprofile-arcs -ftest-coverage")
+        endif()
+        SET(MBEDTLS_FLAGS "")
+        SET(OPENSSL_FLAGS -include base.h -Wno-error=maybe-uninitialized -Wno-error=format -Wno-format -Wno-format-security -Wno-error=unused-but-set-variable -Wno-cast-qual)
+        SET(CMOCKA_FLAGS -std=gnu99 -Wpedantic -Wall -Wshadow -Wmissing-prototypes -Wcast-align -Werror=address -Wstrict-prototypes -Werror=strict-prototypes -Wwrite-strings -Werror=write-strings -Werror-implicit-function-declaration -Wpointer-arith -Werror=pointer-arith -Wdeclaration-after-statement -Werror=declaration-after-statement -Wreturn-type -Werror=return-type -Wuninitialized -Werror=uninitialized -Werror=strict-overflow -Wstrict-overflow=2 -Wno-format-zero-length -Wmissing-field-initializers -Wformat-security -Werror=format-security -fno-common -Wformat -fno-common -fstack-protector-strong -Wno-cast-qual)
+
+        SET(CMAKE_AR arm-openbmc-linux-gnueabi-gcc-ar)
+
+        if(NOT CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 9.3)
+                SET(CMAKE_C_ARCHIVE_FINISH true)
+        endif()
 
+        SET(CMAKE_LINKER arm-openbmc-linux-gnueabi-gcc)
+        SET(CMAKE_EXE_LINKER_FLAGS "$ENV{LDFLAGS} ${OBMCGCCOPTION} -flto -Wno-error -no-pie" )
+        if(GCOV STREQUAL "ON")
+        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}   --coverage -lgcov -fprofile-arcs -ftest-coverage")
+        endif()
+        if(ENABLE_BINARY_BUILD STREQUAL "1")
+        SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> <LINK_FLAGS> <OBJECTS> -o <TARGET> -Wl,--start-group <LINK_LIBRARIES> -lpthread -ldl -Wl,--end-group")
+        else()
+        SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_LINKER> <LINK_FLAGS> <OBJECTS> -o <TARGET> -Wl,--start-group <LINK_LIBRARIES> -Wl,--end-group")
+        endif()
     endif()
 
     if(NOT TOOLCHAIN STREQUAL "NIOS2_GCC")
@@ -767,3 +798,17 @@ else()
         endif()
     endif()
 endif()
+
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib/libspdm.a DESTINATION /usr/lib)
+    install(FILES include/hal/base.h DESTINATION /usr/include/libspdm/include/hal)
+    install(DIRECTORY include/hal/arm DESTINATION /usr/include/libspdm/include/hal)
+    install(DIRECTORY include/hal/library DESTINATION /usr/include/libspdm/include/hal)
+    install(DIRECTORY include/industry_standard DESTINATION /usr/include/libspdm/include)
+    install(DIRECTORY include/library DESTINATION /usr/include/libspdm/include)
+    install(DIRECTORY os_stub/include DESTINATION /usr/include/libspdm/os_stub)
+    install(FILES os_stub/spdm_device_secret_lib_sample/spdm_device_secret_lib_internal.h DESTINATION /usr/include/libspdm/os_stub)
+    add_library(spdm STATIC ${SPDM_OBJECTS})
+
+    INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/lib/pkgconfig/libspdm.pc DESTINATION /usr/lib/pkgconfig)
+    CONFIGURE_FILE(libspdm.pc.in
+      lib/pkgconfig/libspdm.pc @ONLY)
-- 
2.34.1

