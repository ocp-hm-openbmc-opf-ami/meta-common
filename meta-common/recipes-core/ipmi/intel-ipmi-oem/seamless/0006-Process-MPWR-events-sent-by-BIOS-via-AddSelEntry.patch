From dad11402bd2e3c210843e35852f6696731490121 Mon Sep 17 00:00:00 2001
From: AppaRao Puli <apparao.puli@intel.com>
Date: Fri, 13 May 2022 13:20:53 +0000
Subject: [PATCH] Process MPWR events sent by BIOS via AddSelEntry

During Boot time, BIOS will send event to bmc for
following notification related to MPWR feature via
AddSelEntry IPMI command. Add support to handle the
entries and log them to Redfish event log file.

Add SEL Entry use below field:
- Generator ID[8:9]: 0x01 (Bios - 0x01)
- SensorNum[12]: 0x83 (Boot Event)
- EventType[13]: 0x78 (FeatureSpecific)
- EventData1[14]: Feature Bit ( 0x01 For MPWR)
- EventData2[15]: Event Message
    - 0x00: MPWR disabled
    - 0x01: MPWR enabled
    - 0x02: Normal warm reset
    - 0x04: MPWR warm reset success
    - 0x05: MPWR warm reset failed
- EventData3[16]: ErrorCode

Tested:
Using custom BIOS which sends the MPWREnabled status
during bios boot, validated redfish event getting logged
to file. And with bmcweb registry entries patch, validated
redfish event logs from remote and works fine.

2022-05-13T13:19:53.907997+00:00 OpenBMC.0.1.MPWRFeatureEnabled,

Signed-off-by: AppaRao Puli <apparao.puli@intel.com>
---
 include/ipmi_to_redfish_hooks.hpp |  1 +
 src/ipmi_to_redfish_hooks.cpp     | 55 +++++++++++++++++++++++++++++++
 2 files changed, 56 insertions(+)

diff --git a/include/ipmi_to_redfish_hooks.hpp b/include/ipmi_to_redfish_hooks.hpp
index 76f8b92..646fd18 100644
--- a/include/ipmi_to_redfish_hooks.hpp
+++ b/include/ipmi_to_redfish_hooks.hpp
@@ -73,6 +73,7 @@ enum class BIOSEventTypes
     oemDiscrete1 = 0x71,
     oemDiscrete6 = 0x76,
     oemDiscrete7 = 0x77,
+    featureSpecific = 0x78,
     reservedA0 = 0xa0,
     reservedF0 = 0xf0,
 };
diff --git a/src/ipmi_to_redfish_hooks.cpp b/src/ipmi_to_redfish_hooks.cpp
index feee538..602acf0 100644
--- a/src/ipmi_to_redfish_hooks.cpp
+++ b/src/ipmi_to_redfish_hooks.cpp
@@ -40,6 +40,47 @@ static void toHexStr(const boost::beast::span<uint8_t> bytes,
     hexStr = stream.str();
 }
 
+static bool getFeatureSpecificMessage(const SELData& selData,
+                                      std::string& messageID,
+                                      std::vector<std::string>& messageArgs)
+{
+    // EventData1[13] - Represents feature
+    // EventData2[14] - Represents the Event Message key
+    // EventData2[15] - Represents the Arguments
+    uint8_t msgKey = selData.eventData2;
+    uint8_t errCode = selData.eventData3;
+
+    switch (selData.offset)
+    {
+        // MPWR feature
+        case 0x01:
+        {
+            switch (msgKey)
+            {
+                case 0x00:
+                    messageID += ".MPWRFeatureDisabled";
+                    break;
+                case 0x01:
+                    messageID += ".MPWRFeatureEnabled";
+                    break;
+                case 0x04:
+                    messageID += ".MPWResetSuccessful";
+                    break;
+                case 0x05:
+                    messageID += ".MPWResetFailed";
+                    messageArgs.push_back(std::to_string(errCode));
+                    break;
+                default:
+                    return false;
+            }
+            break;
+        }
+        default:
+            return false;
+    }
+
+    return true;
+}
 // Record a BIOS message as a Redfish message instead of a SEL record
 static bool biosMessageHook(const SELData& selData, const std::string& ipmiRaw)
 {
@@ -54,6 +95,11 @@ static bool biosMessageHook(const SELData& selData, const std::string& ipmiRaw)
     std::vector<std::string> messageArgs;
     BIOSSensors sensor = static_cast<BIOSSensors>(selData.sensorNum);
     BIOSEventTypes eventType = static_cast<BIOSEventTypes>(selData.eventType);
+
+    std::cerr << "Sensor: " << std::to_string(selData.sensorNum)
+              << ", EventType: " << std::to_string(selData.eventType)
+              << ", offset: " << std::to_string(selData.offset) << "\n";
+
     switch (sensor)
     {
         case BIOSSensors::memoryRASConfigStatus:
@@ -275,6 +321,15 @@ static bool biosMessageHook(const SELData& selData, const std::string& ipmiRaw)
                     }
                     break;
                 }
+                case BIOSEventTypes::featureSpecific:
+                {
+                    if (!getFeatureSpecificMessage(selData, messageID,
+                                                   messageArgs))
+                    {
+                        return defaultMessageHook(ipmiRaw);
+                    }
+                    break;
+                }
                 default:
                     return defaultMessageHook(ipmiRaw);
                     break;
-- 
2.17.1

